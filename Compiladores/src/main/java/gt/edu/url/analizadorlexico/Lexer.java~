// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/analizadorlexico/Lexer.flex

package gt.edu.url.analizadorlexico;
import static gt.edu.url.analizadorlexico.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\2\0\1\12\1\13\1\14"+
    "\1\15\1\1\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\2\30\1\31\1\32"+
    "\10\30\1\33\1\34\2\30\1\35\10\30\1\36\1\0"+
    "\1\37\3\0\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\2\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\51\1\57\1\60\1\61\1\62\1\63\1\51"+
    "\1\64\1\51\1\65\1\66\1\0\1\67\7\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\3\22\1\23\1\24\20\25\1\26"+
    "\1\27\2\0\1\30\1\0\1\31\1\2\1\32\1\33"+
    "\1\2\1\0\1\34\1\22\1\35\26\25\1\36\2\25"+
    "\1\37\1\40\62\25\1\41\3\25\1\42\4\25\1\43"+
    "\1\44\1\45\4\25\1\46\3\25\1\47\10\25\1\50"+
    "\1\51\15\25\1\52\1\25\1\53\4\25\1\54\20\25"+
    "\1\55\12\25\1\56\3\25\1\57\17\25\1\60\1\61"+
    "\1\62\1\63\1\25\1\64\3\25\1\65\1\25\1\66"+
    "\1\67\1\25\1\70\1\71\1\72\7\25\1\73\2\25"+
    "\1\74\1\75\1\25\1\76\5\25\1\77\1\25\1\100"+
    "\2\25\1\101\1\25\1\102\1\103\1\104\1\105\2\25"+
    "\1\106\1\25\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0150\0\u0188\0\u01c0\0\u01f8\0\u0230"+
    "\0\70\0\70\0\70\0\u0268\0\70\0\u02a0\0\u02d8\0\u0310"+
    "\0\70\0\70\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460"+
    "\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\u0658\0\u0690\0\70\0\70\0\70\0\u0150\0\70\0\u0118"+
    "\0\70\0\70\0\70\0\70\0\u06c8\0\u0700\0\70\0\u0738"+
    "\0\u02d8\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0"+
    "\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0348"+
    "\0\u0c40\0\u0c78\0\u0700\0\u02d8\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18"+
    "\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8"+
    "\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618"+
    "\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u0348\0\u17a0"+
    "\0\u17d8\0\u1810\0\u0348\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u0348"+
    "\0\u0348\0\u0348\0\u1928\0\u1960\0\u1998\0\u19d0\0\u0348\0\u1a08"+
    "\0\u1a40\0\u1a78\0\u0348\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90"+
    "\0\u1bc8\0\u1c00\0\u1c38\0\u0348\0\u0348\0\u1c70\0\u1ca8\0\u1ce0"+
    "\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u0348\0\u1fb8\0\u1ff0\0\u2028"+
    "\0\u2060\0\u0348\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0"+
    "\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370"+
    "\0\u23a8\0\u23e0\0\u0348\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8"+
    "\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u0348\0\u2648\0\u2680"+
    "\0\u26b8\0\u0348\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808"+
    "\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8"+
    "\0\u2a00\0\u0348\0\u0348\0\u0348\0\u0348\0\u2a38\0\u0348\0\u2a70"+
    "\0\u2aa8\0\u2ae0\0\u0348\0\u2b18\0\u0348\0\u0348\0\u2b50\0\u0348"+
    "\0\u0348\0\u0348\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0"+
    "\0\u2cd8\0\u0348\0\u2d10\0\u2d48\0\u0348\0\u0348\0\u2d80\0\u0348"+
    "\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u0348\0\u2ed0\0\u0348"+
    "\0\u2f08\0\u2f40\0\u0348\0\u2f78\0\u0348\0\u0348\0\u0348\0\u0348"+
    "\0\u2fb0\0\u2fe8\0\u0348\0\u3020\0\u0348";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\2"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\4\27\1\30\1\27\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\33\1\41\1\42\1\33\1\43"+
    "\1\44\1\45\1\33\1\46\1\47\1\50\1\51\1\33"+
    "\1\52\2\33\1\53\1\54\2\55\2\0\10\55\1\56"+
    "\54\55\1\3\1\4\1\0\1\3\7\55\1\56\53\55"+
    "\1\0\2\4\1\0\1\4\63\0\2\55\2\0\10\55"+
    "\1\56\10\55\1\57\44\55\2\0\1\60\1\55\1\61"+
    "\5\55\1\56\12\55\7\60\2\55\26\60\4\55\2\0"+
    "\10\55\1\56\3\55\1\62\51\55\2\0\10\55\1\56"+
    "\1\63\54\55\2\0\10\55\1\56\1\55\1\64\53\55"+
    "\2\0\10\55\1\65\3\55\1\65\51\55\2\0\10\55"+
    "\1\56\2\55\1\66\1\55\1\20\50\55\2\0\10\55"+
    "\1\56\10\55\1\67\44\55\2\0\10\55\1\56\1\55"+
    "\1\27\2\55\1\27\5\55\4\27\1\70\2\27\2\55"+
    "\26\27\4\55\2\0\10\55\1\56\1\55\1\27\2\55"+
    "\1\27\5\55\7\27\2\55\26\27\4\55\2\0\10\55"+
    "\1\56\1\55\1\27\2\55\1\27\5\55\6\27\1\71"+
    "\2\55\26\27\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\26\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\15\33\1\72\10\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\1\73"+
    "\11\33\1\74\2\33\1\75\10\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\4\33\1\76\21\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\12\33\1\77"+
    "\1\33\1\100\3\33\1\101\3\33\1\102\1\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\1\103\25\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\1\104"+
    "\25\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\14\33\1\105\11\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\4\33\1\106\10\33\1\107\10\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\4\33\1\110\3\33\1\111\15\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\22\33\1\112\3\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\17\33\1\113\2\33\1\114\3\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\1\115\3\33\1\116\21\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\4\33"+
    "\1\117\3\33\1\120\15\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\1\121"+
    "\25\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\4\33\1\122\21\33\2\55"+
    "\2\65\2\0\64\65\2\55\2\0\10\55\1\56\4\55"+
    "\1\123\50\55\2\0\10\55\1\56\1\55\1\27\2\55"+
    "\1\27\5\55\2\27\1\124\4\27\2\55\26\27\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\12\33\1\125\13\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\3\33\1\126\22\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\1\127\25\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\14\33\1\130\3\33\1\131\5\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\2\33\1\132\15\33\1\133\2\33"+
    "\1\134\2\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\10\33\1\135\15\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\21\33\1\136\4\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\2\33\1\137\16\33\1\140\4\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\21\33\1\141\4\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\12\33"+
    "\1\142\13\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\2\33\1\143\23\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\2\33\1\144\15\33\1\145\5\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\4\33\1\146\21\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\6\33\1\147\17\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\21\33"+
    "\1\150\4\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\4\33\1\151\21\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\12\33\1\152\13\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\10\33\1\153\4\33\1\154\10\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\1\33\1\155\24\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\10\33"+
    "\1\156\15\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\1\157\25\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\14\33\1\160\11\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\14\33\1\161\11\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\17\33\1\162"+
    "\6\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\4\33\1\163\21\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\4\33\1\164\21\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\20\33\1\165\5\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\20\33\1\166"+
    "\5\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\4\33\1\167\21\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\17\33\1\170\6\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\3\33\1\171\15\33\1\172\4\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\15\33\1\173\10\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\13\33\1\174"+
    "\12\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\4\33\1\175\10\33\1\176"+
    "\10\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\17\33\1\177\6\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\1\200\25\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\10\33"+
    "\1\201\15\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\20\33\1\202\5\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\4\33\1\203\21\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\12\33\1\204\4\33\1\205\6\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\21\33\1\206\4\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\17\33"+
    "\1\207\6\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\1\210\25\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\15\33\1\211\10\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\14\33\1\212\11\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\15\33\1\213"+
    "\10\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\14\33\1\214\6\33\1\215"+
    "\2\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\16\33\1\216\7\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\12\33\1\217\13\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\25\33\1\220\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\12\33\1\221\13\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\15\33\1\222\10\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\6\33\1\223\17\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\3\33"+
    "\1\224\22\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\1\225\25\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\14\33\1\226\11\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\4\33\1\227\21\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\21\33\1\230"+
    "\4\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\14\33\1\231\11\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\4\33\1\232\21\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\4\33\1\233\21\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\17\33\1\234"+
    "\6\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\12\33\1\235\13\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\10\33\1\236\15\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\17\33\1\237\6\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\14\33\1\240"+
    "\11\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\10\33\1\241\15\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\21\33\1\242\4\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\4\33\1\243\21\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\15\33\1\244"+
    "\10\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\17\33\1\245\6\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\22\33\1\246\3\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\4\33\1\247\21\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\1\250\25\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\17\33\1\251\6\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\3\33\1\252\22\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\21\33"+
    "\1\253\4\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\2\33\1\254\23\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\1\255\25\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\10\33\1\256\15\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\10\33\1\257"+
    "\15\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\4\33\1\260\21\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\1\261\25\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\14\33"+
    "\1\262\11\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\1\263\25\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\17\33\1\264\6\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\15\33\1\265\10\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\13\33\1\266"+
    "\12\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\22\33\1\267\3\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\23\33\1\270\2\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\14\33\1\271\11\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\15\33\1\272"+
    "\10\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\2\33\1\273\23\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\1\33\1\274\24\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\10\33\1\275\15\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\14\33\1\276"+
    "\11\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\10\33\1\277\15\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\13\33\1\300\12\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\14\33\1\301\11\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\10\33\1\302"+
    "\15\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\15\33\1\303\10\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\17\33\1\304\6\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\10\33\1\305\15\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\3\33\1\306"+
    "\22\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\4\33\1\307\21\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\2\33\1\310\23\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\14\33\1\311\11\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\3\33\1\312"+
    "\22\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\15\33\1\313\10\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\1\314\6\33\2\55\26\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\22\33"+
    "\1\315\3\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\4\33\1\316\21\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\2\33\1\317\23\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\4\33\1\320\21\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\1\321"+
    "\25\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\4\33\1\322\21\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\10\33\1\323\15\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\2\33\1\324\23\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\3\33\1\325"+
    "\22\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\17\33\1\326\6\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\4\33\1\327\21\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\2\33\1\330\23\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\21\33\1\331"+
    "\4\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\20\33\1\332\5\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\1\333\25\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\16\33"+
    "\1\334\7\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\1\335\14\33\1\336"+
    "\10\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\3\33\1\337\22\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\1\340\14\33\1\341\10\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\21\33\1\342\4\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\4\33"+
    "\1\343\21\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\3\33\1\344\2\33\1\345\2\55"+
    "\1\33\1\346\24\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\2\33\1\347"+
    "\23\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\14\33\1\350\11\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\21\33\1\351\4\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\17\33\1\352\6\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\17\33\1\353"+
    "\6\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\20\33\1\354\5\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\17\33\1\355\6\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\15\33\1\356\10\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\4\33\1\357"+
    "\21\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\14\33\1\360\11\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\10\33\1\361\15\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\13\33\1\362\12\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\20\33\1\363"+
    "\5\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\1\364\25\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\20\33\1\365\5\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\20\33"+
    "\1\366\5\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\1\367\25\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\20\33\1\370\5\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\20\33\1\371\5\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\4\33\1\372"+
    "\21\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\17\33\1\373\6\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\14\33\1\374\11\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\4\33\1\375\21\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\15\33\1\376"+
    "\10\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\21\33\1\377\4\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\21\33\1\u0100\4\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\15\33\1\u0101\10\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\20\33\1\u0102"+
    "\5\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\21\33\1\u0103\4\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\1\u0104\25\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\15\33"+
    "\1\u0105\10\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\12\33\1\u0106\13\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\3\33\1\u0107\22\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\15\33\1\u0108\10\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\21\33"+
    "\1\u0109\4\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\1\u010a\25\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\12\33\1\u010b\13\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\15\33\1\u010c\10\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\1\u010d\25\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\17\33\1\u010e\6\33\4\55\2\0"+
    "\10\55\1\56\1\55\1\33\2\55\1\33\5\55\7\33"+
    "\2\55\1\u010f\25\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\17\33\1\u0110"+
    "\6\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\4\33\1\u0111\21\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\4\33\1\u0112\21\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\12\33\1\u0113\13\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\4\33\1\u0114"+
    "\21\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\17\33\1\u0115\6\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\17\33\1\u0116\6\33\4\55\2\0\10\55"+
    "\1\56\1\55\1\33\2\55\1\33\5\55\7\33\2\55"+
    "\17\33\1\u0117\6\33\4\55\2\0\10\55\1\56\1\55"+
    "\1\33\2\55\1\33\5\55\7\33\2\55\20\33\1\u0118"+
    "\5\33\4\55\2\0\10\55\1\56\1\55\1\33\2\55"+
    "\1\33\5\55\7\33\2\55\17\33\1\u0119\6\33\4\55"+
    "\2\0\10\55\1\56\1\55\1\33\2\55\1\33\5\55"+
    "\7\33\2\55\1\u011a\25\33\4\55\2\0\10\55\1\56"+
    "\1\55\1\33\2\55\1\33\5\55\7\33\2\55\15\33"+
    "\1\u011b\10\33\4\55\2\0\10\55\1\56\1\55\1\33"+
    "\2\55\1\33\5\55\7\33\2\55\14\33\1\u011c\11\33"+
    "\4\55\2\0\10\55\1\56\1\55\1\33\2\55\1\33"+
    "\5\55\7\33\2\55\15\33\1\u011d\10\33\2\55";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\53\1\2\0\1\1\1\0\5\1\1\0\347\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 72: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 73: break;
          case 3:
            { return NUMERAL;
            }
            // fall through
          case 74: break;
          case 4:
            { return DOLAR;
            }
            // fall through
          case 75: break;
          case 5:
            { return DIVICIONMODULAR;
            }
            // fall through
          case 76: break;
          case 6:
            { return PARENTESISI;
            }
            // fall through
          case 77: break;
          case 7:
            { return PARENTESISF;
            }
            // fall through
          case 78: break;
          case 8:
            { return MULTIPLICACION;
            }
            // fall through
          case 79: break;
          case 9:
            { return MAS;
            }
            // fall through
          case 80: break;
          case 10:
            { return MENOS;
            }
            // fall through
          case 81: break;
          case 11:
            { return DIVICION;
            }
            // fall through
          case 82: break;
          case 12:
            { lexeme=yytext(); return NUMEROENTERO;
            }
            // fall through
          case 83: break;
          case 13:
            { return DOSPUNTOS;
            }
            // fall through
          case 84: break;
          case 14:
            { return FINLINEA;
            }
            // fall through
          case 85: break;
          case 15:
            { return MENORQUE;
            }
            // fall through
          case 86: break;
          case 16:
            { return IGUAL;
            }
            // fall through
          case 87: break;
          case 17:
            { return MAYORQUE;
            }
            // fall through
          case 88: break;
          case 18:
            { lexeme=yytext(); return IDENTIFICADORCLASE;
            }
            // fall through
          case 89: break;
          case 19:
            { return CORCHETEI;
            }
            // fall through
          case 90: break;
          case 20:
            { return CORCHETEF;
            }
            // fall through
          case 91: break;
          case 21:
            { lexeme=yytext(); return IDENTIFICADOR;
            }
            // fall through
          case 92: break;
          case 22:
            { return LLAVEI;
            }
            // fall through
          case 93: break;
          case 23:
            { return LLAVEF;
            }
            // fall through
          case 94: break;
          case 24:
            { return DIFERENTE;
            }
            // fall through
          case 95: break;
          case 25:
            { return TEXTO;
            }
            // fall through
          case 96: break;
          case 26:
            { return INCREMENTO;
            }
            // fall through
          case 97: break;
          case 27:
            { return DECREMENTO;
            }
            // fall through
          case 98: break;
          case 28:
            { return COMPARACION;
            }
            // fall through
          case 99: break;
          case 29:
            { lexeme=yytext(); return OR;
            }
            // fall through
          case 100: break;
          case 30:
            { lexeme=yytext(); return SI;
            }
            // fall through
          case 101: break;
          case 31:
            { lexeme=yytext(); return NUMEROREAL;
            }
            // fall through
          case 102: break;
          case 32:
            { lexeme=yytext(); return AND;
            }
            // fall through
          case 103: break;
          case 33:
            { lexeme=yytext(); return LEER;
            }
            // fall through
          case 104: break;
          case 34:
            { lexeme=yytext(); return NULO;
            }
            // fall through
          case 105: break;
          case 35:
            { lexeme=yytext(); return RAIZ;
            }
            // fall through
          case 106: break;
          case 36:
            { lexeme=yytext(); return REAL;
            }
            // fall through
          case 107: break;
          case 37:
            { lexeme=yytext(); return SENO;
            }
            // fall through
          case 108: break;
          case 38:
            { lexeme=yytext(); return CLASE;
            }
            // fall through
          case 109: break;
          case 39:
            { lexeme=yytext(); return DESDE;
            }
            // fall through
          case 110: break;
          case 40:
            { lexeme=yytext(); return FALSO;
            }
            // fall through
          case 111: break;
          case 41:
            { lexeme=yytext(); return HACER;
            }
            // fall through
          case 112: break;
          case 42:
            { lexeme=yytext(); return CADENA;
            }
            // fall through
          case 113: break;
          case 43:
            { lexeme=yytext(); return COSENO;
            }
            // fall through
          case 114: break;
          case 44:
            { lexeme=yytext(); return ENTERO;
            }
            // fall through
          case 115: break;
          case 45:
            { lexeme=yytext(); return BOLEANO;
            }
            // fall through
          case 116: break;
          case 46:
            { lexeme=yytext(); return INCLUIR;
            }
            // fall through
          case 117: break;
          case 47:
            { lexeme=yytext(); return METODOS;
            }
            // fall through
          case 118: break;
          case 48:
            { lexeme=yytext(); return DEVOLVER;
            }
            // fall through
          case 119: break;
          case 49:
            { lexeme=yytext(); return ELIMINAR;
            }
            // fall through
          case 120: break;
          case 50:
            { lexeme=yytext(); return ENTONCES;
            }
            // fall through
          case 121: break;
          case 51:
            { lexeme=yytext(); return ESCRIBIR;
            }
            // fall through
          case 122: break;
          case 52:
            { lexeme=yytext(); return EXTIENDE;
            }
            // fall through
          case 123: break;
          case 53:
            { lexeme=yytext(); return MIENTRAS;
            }
            // fall through
          case 124: break;
          case 54:
            { lexeme=yytext(); return PRIVADAS;
            }
            // fall through
          case 125: break;
          case 55:
            { lexeme=yytext(); return PRIVADOS;
            }
            // fall through
          case 126: break;
          case 56:
            { lexeme=yytext(); return PUBLICAS;
            }
            // fall through
          case 127: break;
          case 57:
            { lexeme=yytext(); return PUBLICOS;
            }
            // fall through
          case 128: break;
          case 58:
            { lexeme=yytext(); return TANGENTE;
            }
            // fall through
          case 129: break;
          case 59:
            { lexeme=yytext(); return ESTATICO;
            }
            // fall through
          case 130: break;
          case 60:
            { lexeme=yytext(); return LOG;
            }
            // fall through
          case 131: break;
          case 61:
            { lexeme=yytext(); return PRINCIPAL;
            }
            // fall through
          case 132: break;
          case 62:
            { lexeme=yytext(); return VERDADERO;
            }
            // fall through
          case 133: break;
          case 63:
            { lexeme=yytext(); return DESTRUCTOR;
            }
            // fall through
          case 134: break;
          case 64:
            { lexeme=yytext(); return INSTANCIAR;
            }
            // fall through
          case 135: break;
          case 65:
            { lexeme=yytext(); return CADENAREAL;
            }
            // fall through
          case 136: break;
          case 66:
            { lexeme=yytext(); return CONSTRUCTOR;
            }
            // fall through
          case 137: break;
          case 67:
            { lexeme=yytext(); return DECREMENTAR;
            }
            // fall through
          case 138: break;
          case 68:
            { lexeme=yytext(); return INCREMENTAR;
            }
            // fall through
          case 139: break;
          case 69:
            { lexeme=yytext(); return PROPIEDADES;
            }
            // fall through
          case 140: break;
          case 70:
            { lexeme=yytext(); return CADENAENTERO;
            }
            // fall through
          case 141: break;
          case 71:
            { lexeme=yytext(); return CADENABOOL;
            }
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
