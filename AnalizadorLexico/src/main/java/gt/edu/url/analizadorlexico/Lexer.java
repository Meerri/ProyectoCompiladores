// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/analizadorlexico/Lexer.flex

package gt.edu.url.analizadorlexico;
import static gt.edu.url.analizadorlexico.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\2\0\1\12\1\13\1\14"+
    "\1\15\1\1\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\2\30\1\31\1\32"+
    "\10\30\1\33\1\34\2\30\1\35\10\30\1\36\1\0"+
    "\1\37\1\0\1\40\1\0\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\2\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\52\1\60\1\61\1\62\1\63"+
    "\1\64\1\52\1\65\1\52\1\66\1\67\1\0\1\70"+
    "\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\3\22\1\23\1\24\20\25\1\26"+
    "\1\27\2\0\1\30\1\0\1\31\1\0\1\2\1\32"+
    "\1\33\1\2\1\0\1\34\1\22\1\35\25\25\1\36"+
    "\2\25\2\0\1\37\35\25\1\14\1\0\24\25\1\40"+
    "\3\25\1\41\4\25\1\42\1\43\2\25\1\0\2\25"+
    "\1\44\3\25\1\45\10\25\1\46\1\47\14\25\1\50"+
    "\1\25\1\51\1\25\1\52\4\25\1\53\20\25\1\54"+
    "\12\25\1\55\3\25\1\56\17\25\1\57\1\60\1\61"+
    "\1\62\1\25\1\63\3\25\1\64\1\25\1\65\1\66"+
    "\1\25\1\67\1\70\1\71\7\25\1\72\2\25\1\73"+
    "\1\74\1\25\1\75\5\25\1\76\1\25\1\77\2\25"+
    "\1\100\1\25\1\101\1\102\1\103\1\104\2\25\1\105"+
    "\1\25\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\71\0\71"+
    "\0\71\0\u0156\0\71\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273"+
    "\0\71\0\71\0\71\0\u02ac\0\71\0\u02e5\0\u031e\0\u0357"+
    "\0\71\0\71\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\71\0\71\0\71\0\u018f\0\71\0\u011d"+
    "\0\71\0\u0720\0\71\0\71\0\71\0\u0759\0\u0792\0\71"+
    "\0\u07cb\0\u031e\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0390"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u031e\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197"+
    "\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f"+
    "\0\u1398\0\u13d1\0\71\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e"+
    "\0\u0390\0\u18b7\0\u18f0\0\u1929\0\u0390\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u0390\0\u0390\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u0390\0\u1b63\0\u1b9c\0\u1bd5\0\u0390\0\u1c0e\0\u1c47\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u0390\0\u0390\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u2049\0\71\0\u2082\0\u20bb\0\u20f4\0\u0390"+
    "\0\u212d\0\u2166\0\u219f\0\u21d8\0\u0390\0\u2211\0\u224a\0\u2283"+
    "\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b"+
    "\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u0390\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2"+
    "\0\u0390\0\u27db\0\u2814\0\u284d\0\u0390\0\u2886\0\u28bf\0\u28f8"+
    "\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0"+
    "\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u0390\0\u0390\0\u0390\0\u0390"+
    "\0\u2bdd\0\u0390\0\u2c16\0\u2c4f\0\u2c88\0\u0390\0\u2cc1\0\u0390"+
    "\0\u0390\0\u2cfa\0\u0390\0\u0390\0\u0390\0\u2d33\0\u2d6c\0\u2da5"+
    "\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u0390\0\u2ec2\0\u2efb\0\u0390"+
    "\0\u0390\0\u2f34\0\u0390\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051"+
    "\0\u0390\0\u308a\0\u0390\0\u30c3\0\u30fc\0\u0390\0\u3135\0\u0390"+
    "\0\u0390\0\u0390\0\u0390\0\u316e\0\u31a7\0\u0390\0\u31e0\0\u0390";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\2"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\4\27\1\30\1\27\1\31\1\32\1\2\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\33\1\41\1\42\1\33"+
    "\1\43\1\44\1\45\1\33\1\46\1\47\1\50\1\51"+
    "\1\33\1\52\2\33\1\53\1\54\2\55\2\0\10\55"+
    "\1\56\55\55\1\3\1\4\1\0\1\3\7\55\1\56"+
    "\54\55\1\0\2\4\1\0\1\4\64\0\2\55\2\0"+
    "\10\55\1\56\10\55\1\57\45\55\2\0\1\60\1\55"+
    "\1\61\5\55\1\56\12\55\7\60\2\55\27\60\4\55"+
    "\2\0\10\55\1\56\1\55\1\62\54\55\2\0\10\55"+
    "\1\56\3\55\1\63\52\55\2\0\10\55\1\56\1\64"+
    "\55\55\2\0\10\55\1\56\1\55\1\65\54\55\2\0"+
    "\10\55\1\66\3\55\1\66\52\55\2\0\10\55\1\56"+
    "\2\55\1\67\1\55\1\20\51\55\2\0\10\55\1\56"+
    "\10\55\1\70\45\55\2\0\10\55\1\56\4\55\1\27"+
    "\5\55\4\27\1\71\2\27\2\55\27\27\4\55\2\0"+
    "\10\55\1\56\4\55\1\27\5\55\7\27\2\55\27\27"+
    "\4\55\2\0\10\55\1\56\4\55\1\27\5\55\6\27"+
    "\1\72\2\55\27\27\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\27\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\16\33\1\73"+
    "\10\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\1\33\1\74\11\33\1\75\2\33\1\76"+
    "\10\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\5\33\1\77\21\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\13\33\1\100"+
    "\1\33\1\101\3\33\1\102\3\33\1\103\1\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\1\33\1\104\25\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\1\33\1\105\25\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\15\33\1\106\11\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\5\33\1\107\10\33\1\110"+
    "\10\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\5\33\1\111\3\33\1\112\15\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\23\33\1\113\3\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\20\33\1\114\2\33\1\115"+
    "\3\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\1\33\1\116\25\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\5\33\1\117"+
    "\3\33\1\120\15\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\1\33\1\121\25\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\5\33\1\122\21\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\123\47\55\2\66\2\0\65\66\2\55\2\0\6\55"+
    "\1\124\1\55\1\56\56\55\2\0\10\55\1\56\4\55"+
    "\1\27\5\55\2\27\1\125\4\27\2\55\27\27\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\13\33\1\126\13\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\4\33\1\127\22\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\1\33\1\130\25\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\15\33\1\131\3\33\1\132"+
    "\5\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\3\33\1\133\15\33\1\134\2\33\1\135"+
    "\2\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\11\33\1\136\15\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\22\33\1\137"+
    "\4\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\3\33\1\140\16\33\1\141\4\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\22\33\1\142\4\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\13\33\1\143\13\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\3\33\1\144\23\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\3\33\1\145\15\33\1\146"+
    "\5\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\5\33\1\147\21\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\7\33\1\150"+
    "\17\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\22\33\1\151\4\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\5\33\1\152"+
    "\21\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\13\33\1\153\13\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\11\33\1\154"+
    "\4\33\1\155\10\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\2\33\1\156\24\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\11\33\1\157\15\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\15\33\1\160\11\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\15\33\1\161\11\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\20\33\1\162\6\33\4\55"+
    "\2\0\7\55\1\163\1\56\4\55\1\123\51\55\2\0"+
    "\10\55\1\56\1\55\1\164\54\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\5\33\1\165\21\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\5\33\1\166\21\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\21\33\1\167\5\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\21\33\1\170\5\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\5\33\1\171\21\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\20\33\1\172\6\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\4\33\1\173\15\33"+
    "\1\174\4\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\16\33\1\175\10\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\14\33"+
    "\1\176\12\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\5\33\1\177\10\33\1\200\10\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\20\33\1\201\6\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\1\33\1\202\25\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\11\33\1\203\15\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\21\33\1\204\5\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\5\33\1\205\21\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\13\33\1\206\4\33"+
    "\1\207\6\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\22\33\1\210\4\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\20\33"+
    "\1\211\6\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\1\33\1\212\25\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\16\33"+
    "\1\213\10\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\15\33\1\214\11\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\16\33"+
    "\1\215\10\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\15\33\1\216\6\33\1\217\2\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\17\33\1\220\7\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\13\33\1\221\13\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\26\33\1\222\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\16\33\1\223\10\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\7\33\1\224\17\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\4\33\1\225\22\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\226\51\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\1\33\1\227"+
    "\25\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\15\33\1\230\11\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\5\33\1\231"+
    "\21\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\22\33\1\232\4\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\15\33\1\233"+
    "\11\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\5\33\1\234\21\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\5\33\1\235"+
    "\21\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\20\33\1\236\6\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\13\33\1\237"+
    "\13\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\11\33\1\240\15\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\20\33\1\241"+
    "\6\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\15\33\1\242\11\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\11\33\1\243"+
    "\15\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\22\33\1\244\4\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\5\33\1\245"+
    "\21\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\16\33\1\246\10\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\20\33\1\247"+
    "\6\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\23\33\1\250\3\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\5\33\1\251"+
    "\21\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\1\33\1\252\25\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\20\33\1\253"+
    "\6\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\4\33\1\254\22\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\22\33\1\255"+
    "\4\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\3\33\1\256\23\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\1\33\1\257"+
    "\25\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\11\33\1\260\15\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\11\33\1\261"+
    "\15\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\5\33\1\262\21\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\1\33\1\263"+
    "\25\33\4\55\2\0\7\55\1\264\1\56\4\55\1\226"+
    "\51\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\15\33\1\265\11\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\1\33\1\266\25\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\20\33\1\267\6\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\16\33\1\270\10\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\14\33\1\271\12\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\23\33\1\272\3\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\24\33\1\273\2\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\15\33\1\274\11\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\16\33\1\275\10\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\3\33\1\276\23\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\2\33\1\277\24\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\11\33\1\300\15\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\15\33\1\301\11\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\11\33\1\302\15\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\14\33\1\303\12\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\15\33\1\304\11\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\11\33\1\305\15\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\16\33\1\306\10\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\20\33\1\307\6\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\11\33\1\310\15\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\4\33\1\311\22\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\5\33\1\312\21\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\3\33\1\313\23\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\15\33\1\314\11\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\7\33"+
    "\2\55\4\33\1\315\22\33\4\55\2\0\10\55\1\56"+
    "\4\55\1\33\5\55\7\33\2\55\16\33\1\316\10\33"+
    "\4\55\2\0\10\55\1\56\4\55\1\33\5\55\1\317"+
    "\6\33\2\55\27\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\23\33\1\320\3\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\5\33\1\321\21\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\3\33\1\322\23\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\5\33\1\323\21\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\1\33\1\324\25\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\5\33\1\325\21\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\11\33\1\326\15\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\3\33\1\327\23\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\4\33\1\330\22\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\20\33\1\331\6\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\5\33\1\332\21\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\3\33\1\333\23\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\22\33\1\334\4\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\21\33\1\335\5\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\1\33\1\336\25\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\17\33\1\337\7\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\1\33\1\340\14\33\1\341"+
    "\10\33\4\55\2\0\10\55\1\56\4\55\1\33\5\55"+
    "\7\33\2\55\4\33\1\342\22\33\4\55\2\0\10\55"+
    "\1\56\4\55\1\33\5\55\7\33\2\55\1\33\1\343"+
    "\14\33\1\344\10\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\7\33\2\55\22\33\1\345\4\33\4\55"+
    "\2\0\10\55\1\56\4\55\1\33\5\55\7\33\2\55"+
    "\5\33\1\346\21\33\4\55\2\0\10\55\1\56\4\55"+
    "\1\33\5\55\3\33\1\347\2\33\1\350\2\55\2\33"+
    "\1\351\24\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\3\33\1\352\23\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\15\33"+
    "\1\353\11\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\22\33\1\354\4\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\20\33"+
    "\1\355\6\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\20\33\1\356\6\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\21\33"+
    "\1\357\5\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\20\33\1\360\6\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\16\33"+
    "\1\361\10\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\5\33\1\362\21\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\15\33"+
    "\1\363\11\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\11\33\1\364\15\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\14\33"+
    "\1\365\12\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\21\33\1\366\5\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\1\33"+
    "\1\367\25\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\21\33\1\370\5\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\21\33"+
    "\1\371\5\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\1\33\1\372\25\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\21\33"+
    "\1\373\5\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\21\33\1\374\5\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\5\33"+
    "\1\375\21\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\20\33\1\376\6\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\15\33"+
    "\1\377\11\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\5\33\1\u0100\21\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\16\33"+
    "\1\u0101\10\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\22\33\1\u0102\4\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\22\33"+
    "\1\u0103\4\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\16\33\1\u0104\10\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\21\33"+
    "\1\u0105\5\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\22\33\1\u0106\4\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\1\33"+
    "\1\u0107\25\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\16\33\1\u0108\10\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\13\33"+
    "\1\u0109\13\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\4\33\1\u010a\22\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\16\33"+
    "\1\u010b\10\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\22\33\1\u010c\4\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\1\33"+
    "\1\u010d\25\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\13\33\1\u010e\13\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\16\33"+
    "\1\u010f\10\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\1\33\1\u0110\25\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\20\33"+
    "\1\u0111\6\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\1\33\1\u0112\25\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\20\33"+
    "\1\u0113\6\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\5\33\1\u0114\21\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\5\33"+
    "\1\u0115\21\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\13\33\1\u0116\13\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\5\33"+
    "\1\u0117\21\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\20\33\1\u0118\6\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\20\33"+
    "\1\u0119\6\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\20\33\1\u011a\6\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\21\33"+
    "\1\u011b\5\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\20\33\1\u011c\6\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\1\33"+
    "\1\u011d\25\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\16\33\1\u011e\10\33\4\55\2\0"+
    "\10\55\1\56\4\55\1\33\5\55\7\33\2\55\15\33"+
    "\1\u011f\11\33\4\55\2\0\10\55\1\56\4\55\1\33"+
    "\5\55\7\33\2\55\16\33\1\u0120\10\33\2\55";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12825];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\53\1\2\0\1\1\1\0\1\1\1\0\4\1"+
    "\1\0\33\1\2\0\37\1\1\0\41\1\1\0\212\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 71: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 72: break;
          case 3:
            { return NUMERAL;
            }
            // fall through
          case 73: break;
          case 4:
            { return DOLAR;
            }
            // fall through
          case 74: break;
          case 5:
            { return DIVICIONMODULAR;
            }
            // fall through
          case 75: break;
          case 6:
            { return PARENTESISI;
            }
            // fall through
          case 76: break;
          case 7:
            { return PARENTESISF;
            }
            // fall through
          case 77: break;
          case 8:
            { return MULTIPLICACION;
            }
            // fall through
          case 78: break;
          case 9:
            { return MAS;
            }
            // fall through
          case 79: break;
          case 10:
            { return MENOS;
            }
            // fall through
          case 80: break;
          case 11:
            { return DIVICION;
            }
            // fall through
          case 81: break;
          case 12:
            { lexeme=yytext(); return NUMEROENTERO;
            }
            // fall through
          case 82: break;
          case 13:
            { return DOSPUNTOS;
            }
            // fall through
          case 83: break;
          case 14:
            { return FINLINEA;
            }
            // fall through
          case 84: break;
          case 15:
            { return MENORQUE;
            }
            // fall through
          case 85: break;
          case 16:
            { return IGUAL;
            }
            // fall through
          case 86: break;
          case 17:
            { return MAYORQUE;
            }
            // fall through
          case 87: break;
          case 18:
            { lexeme=yytext(); return IDENTIFICADORCLASE;
            }
            // fall through
          case 88: break;
          case 19:
            { return CORCHETEI;
            }
            // fall through
          case 89: break;
          case 20:
            { return CORCHETEF;
            }
            // fall through
          case 90: break;
          case 21:
            { lexeme=yytext(); return IDENTIFICADOR;
            }
            // fall through
          case 91: break;
          case 22:
            { return LLAVEI;
            }
            // fall through
          case 92: break;
          case 23:
            { return LLAVEF;
            }
            // fall through
          case 93: break;
          case 24:
            { return DIFERENTE;
            }
            // fall through
          case 94: break;
          case 25:
            { return TEXTO;
            }
            // fall through
          case 95: break;
          case 26:
            { return INCREMENTO;
            }
            // fall through
          case 96: break;
          case 27:
            { return DECREMENTO;
            }
            // fall through
          case 97: break;
          case 28:
            { return COMPARACION;
            }
            // fall through
          case 98: break;
          case 29:
            { lexeme=yytext(); return OR;
            }
            // fall through
          case 99: break;
          case 30:
            { lexeme=yytext(); return SI;
            }
            // fall through
          case 100: break;
          case 31:
            { lexeme=yytext(); return AND;
            }
            // fall through
          case 101: break;
          case 32:
            { lexeme=yytext(); return LEER;
            }
            // fall through
          case 102: break;
          case 33:
            { lexeme=yytext(); return NULO;
            }
            // fall through
          case 103: break;
          case 34:
            { lexeme=yytext(); return RAIZ;
            }
            // fall through
          case 104: break;
          case 35:
            { lexeme=yytext(); return SENO;
            }
            // fall through
          case 105: break;
          case 36:
            { lexeme=yytext(); return CLASE;
            }
            // fall through
          case 106: break;
          case 37:
            { lexeme=yytext(); return DESDE;
            }
            // fall through
          case 107: break;
          case 38:
            { lexeme=yytext(); return FALSO;
            }
            // fall through
          case 108: break;
          case 39:
            { lexeme=yytext(); return HACER;
            }
            // fall through
          case 109: break;
          case 40:
            { lexeme=yytext(); return NUMEROREAL;
            }
            // fall through
          case 110: break;
          case 41:
            { lexeme=yytext(); return CADENA;
            }
            // fall through
          case 111: break;
          case 42:
            { lexeme=yytext(); return COSENO;
            }
            // fall through
          case 112: break;
          case 43:
            { lexeme=yytext(); return ENTERO;
            }
            // fall through
          case 113: break;
          case 44:
            { lexeme=yytext(); return BOLEANO;
            }
            // fall through
          case 114: break;
          case 45:
            { lexeme=yytext(); return INCLUIR;
            }
            // fall through
          case 115: break;
          case 46:
            { lexeme=yytext(); return METODOS;
            }
            // fall through
          case 116: break;
          case 47:
            { lexeme=yytext(); return DEVOLVER;
            }
            // fall through
          case 117: break;
          case 48:
            { lexeme=yytext(); return ELIMINAR;
            }
            // fall through
          case 118: break;
          case 49:
            { lexeme=yytext(); return ENTONCES;
            }
            // fall through
          case 119: break;
          case 50:
            { lexeme=yytext(); return ESCRIBIR;
            }
            // fall through
          case 120: break;
          case 51:
            { lexeme=yytext(); return EXTIENDE;
            }
            // fall through
          case 121: break;
          case 52:
            { lexeme=yytext(); return MIENTRAS;
            }
            // fall through
          case 122: break;
          case 53:
            { lexeme=yytext(); return PRIVADAS;
            }
            // fall through
          case 123: break;
          case 54:
            { lexeme=yytext(); return PRIVADOS;
            }
            // fall through
          case 124: break;
          case 55:
            { lexeme=yytext(); return PUBLICAS;
            }
            // fall through
          case 125: break;
          case 56:
            { lexeme=yytext(); return PUBLICOS;
            }
            // fall through
          case 126: break;
          case 57:
            { lexeme=yytext(); return TANGENTE;
            }
            // fall through
          case 127: break;
          case 58:
            { lexeme=yytext(); return ESTATICO;
            }
            // fall through
          case 128: break;
          case 59:
            { lexeme=yytext(); return LOG;
            }
            // fall through
          case 129: break;
          case 60:
            { lexeme=yytext(); return PRINCIPAL;
            }
            // fall through
          case 130: break;
          case 61:
            { lexeme=yytext(); return VERDADERO;
            }
            // fall through
          case 131: break;
          case 62:
            { lexeme=yytext(); return DESTRUCTOR;
            }
            // fall through
          case 132: break;
          case 63:
            { lexeme=yytext(); return INSTANCIAR;
            }
            // fall through
          case 133: break;
          case 64:
            { lexeme=yytext(); return CADENAREAL;
            }
            // fall through
          case 134: break;
          case 65:
            { lexeme=yytext(); return CONSTRUCTOR;
            }
            // fall through
          case 135: break;
          case 66:
            { lexeme=yytext(); return DECREMENTAR;
            }
            // fall through
          case 136: break;
          case 67:
            { lexeme=yytext(); return INCREMENTAR;
            }
            // fall through
          case 137: break;
          case 68:
            { lexeme=yytext(); return PROPIEDADES;
            }
            // fall through
          case 138: break;
          case 69:
            { lexeme=yytext(); return CADENAENTERO;
            }
            // fall through
          case 139: break;
          case 70:
            { lexeme=yytext(); return CADENABOOL;
            }
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
