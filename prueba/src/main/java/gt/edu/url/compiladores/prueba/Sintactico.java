
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.prueba;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\004\004\000" +
    "\002\005\004\000\002\005\006\000\002\005\003\000\002" +
    "\012\005\000\002\012\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\006\006\000" +
    "\002\006\007\000\002\006\007\000\002\006\010\000\002" +
    "\006\007\000\002\006\005\000\002\006\007\000\002\006" +
    "\005\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\004\000\002\015\006\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\003\000" +
    "\002\021\004\000\002\021\003\000\002\021\003\000\002" +
    "\024\004\000\002\024\005\000\002\025\004\000\002\025" +
    "\005\000\002\026\004\000\002\027\003\000\002\027\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\004" +
    "\000\002\033\003\000\002\033\004\000\002\033\004\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\035\005\000\002\040\005\000\002\036\005\000\002\037" +
    "\004\000\002\013\004\000\002\013\005\000\002\032\003" +
    "\000\002\032\005\000\002\031\006\000\002\031\004\000" +
    "\002\041\003\000\002\041\003\000\002\043\004\000\002" +
    "\042\004\000\002\044\003\000\002\044\005\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\047\005\000\002\050\003\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\003\000\002\046\003\000\002\051\010\000\002\051" +
    "\011\000\002\052\003\000\002\052\004\000\002\053\003" +
    "\000\002\053\004\000\002\053\004\000\002\053\005\000" +
    "\002\023\003\000\002\023\003\000\002\023\004\000\002" +
    "\023\004\000\002\045\010\000\002\007\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\056\005\011\010\031\011\036\012\051\013" +
    "\033\016\016\017\035\026\050\031\030\034\017\036\006" +
    "\037\046\040\024\041\044\072\023\073\047\074\012\076" +
    "\007\077\014\100\021\102\027\103\037\001\002\000\060" +
    "\002\uffa2\005\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\016" +
    "\uffa2\017\uffa2\026\uffa2\031\uffa2\034\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\072\uffa2\073\uffa2\074\uffa2\076\uffa2\077" +
    "\uffa2\100\uffa2\102\uffa2\103\uffa2\001\002\000\060\002\uff8f" +
    "\005\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\016\uff8f\017" +
    "\uff8f\026\uff8f\031\uff8f\034\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\041\uff8f\072\uff8f\073\uff8f\074\uff8f\076\uff8f\077\uff8f\100" +
    "\uff8f\102\uff8f\103\uff8f\001\002\000\004\016\305\001\002" +
    "\000\022\004\151\006\146\007\136\016\152\020\141\021" +
    "\150\023\140\057\137\001\002\000\004\002\303\001\002" +
    "\000\026\016\uffdc\042\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\001\002\000\022" +
    "\004\151\006\146\007\136\016\152\020\141\021\150\023" +
    "\140\057\137\001\002\000\004\002\000\001\002\000\016" +
    "\005\011\010\031\011\036\012\051\013\033\016\265\001" +
    "\002\000\060\002\ufffb\005\011\010\031\011\036\012\051" +
    "\013\033\016\016\017\035\026\050\031\030\034\017\036" +
    "\006\037\046\040\024\041\044\072\023\073\047\074\012" +
    "\076\007\077\014\100\021\102\027\103\037\001\002\000" +
    "\006\033\257\055\133\001\002\000\060\002\uff9f\005\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\013\uff9f\016\uff9f\017\uff9f\026" +
    "\uff9f\031\uff9f\034\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\072\uff9f\073\uff9f\074\uff9f\076\uff9f\077\uff9f\100\uff9f\102" +
    "\uff9f\103\uff9f\001\002\000\060\002\uffa4\005\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\016\uffa4\017\uffa4\026\uffa4\031" +
    "\uffa4\034\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\072\uffa4" +
    "\073\uffa4\074\uffa4\076\uffa4\077\uffa4\100\uffa4\102\uffa4\103" +
    "\uffa4\001\002\000\022\004\151\006\146\007\136\016\152" +
    "\020\141\021\150\023\140\057\137\001\002\000\060\002" +
    "\uffa1\005\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\016\uffa1" +
    "\017\uffa1\026\uffa1\031\uffa1\034\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\072\uffa1\073\uffa1\074\uffa1\076\uffa1\077\uffa1" +
    "\100\uffa1\102\uffa1\103\uffa1\001\002\000\016\004\151\006" +
    "\146\007\136\016\152\020\141\023\140\001\002\000\004" +
    "\070\232\001\002\000\056\005\011\010\031\011\036\012" +
    "\051\013\033\016\016\017\035\026\050\031\030\034\017" +
    "\036\006\037\046\040\024\041\044\072\023\073\047\074" +
    "\012\076\007\077\014\100\021\102\027\103\037\001\002" +
    "\000\060\002\uffa9\005\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\016\uffa9\017\uffa9\026\uffa9\031\uffa9\034\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\072\uffa9\073\uffa9\074\uffa9\076" +
    "\uffa9\077\uffa9\100\uffa9\102\uffa9\103\uffa9\001\002\000\012" +
    "\024\224\027\227\043\223\104\225\001\002\000\004\017" +
    "\220\001\002\000\026\016\uffd8\042\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\001" +
    "\002\000\060\002\uffd0\005\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\016\uffd0\017\uffd0\026\uffd0\031\uffd0\034\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\072\uffd0\073\uffd0\074\uffd0" +
    "\076\uffd0\077\uffd0\100\uffd0\102\uffd0\103\uffd0\001\002\000" +
    "\026\016\uffda\042\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\uffda\053\uffda\054\uffda\001\002\000\060\002" +
    "\uffcf\005\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\016\uffcf" +
    "\017\uffcf\026\uffcf\031\uffcf\034\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\072\uffcf\073\uffcf\074\uffcf\076\uffcf\077\uffcf" +
    "\100\uffcf\102\uffcf\103\uffcf\001\002\000\004\016\213\001" +
    "\002\000\026\016\uffdb\042\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\001\002\000" +
    "\010\025\211\030\210\105\206\001\002\000\056\005\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\016\ufff6\017\ufff6\026" +
    "\ufff6\031\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\076\ufff6\077\ufff6\100\ufff6\102" +
    "\ufff6\103\ufff6\001\002\000\060\002\uffaa\005\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\016\uffaa\017\uffaa\026\uffaa\031" +
    "\uffaa\034\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\072\uffaa" +
    "\073\uffaa\074\uffaa\076\uffaa\077\uffaa\100\uffaa\102\uffaa\103" +
    "\uffaa\001\002\000\056\005\011\010\031\011\036\012\051" +
    "\013\033\016\016\017\035\026\050\031\030\034\017\036" +
    "\006\037\046\040\024\041\044\072\023\073\047\074\012" +
    "\076\007\077\014\100\021\102\027\103\037\001\002\000" +
    "\062\002\uffd2\005\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\016\uffd2\017\uffd2\026\uffd2\031\uffd2\034\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\055\133\072\uffd2\073\uffd2\074\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\102\uffd2\103\uffd2\001\002\000" +
    "\004\023\132\001\002\000\026\016\101\042\103\045\075" +
    "\046\073\047\077\050\076\051\072\052\071\053\102\054" +
    "\074\001\002\000\004\070\064\001\002\000\004\016\063" +
    "\001\002\000\060\002\uff96\005\uff96\010\uff96\011\uff96\012" +
    "\uff96\013\uff96\016\uff96\017\uff96\026\uff96\031\uff96\034\uff96" +
    "\036\uff96\037\uff96\040\uff96\041\uff96\072\uff96\073\uff96\074" +
    "\uff96\076\uff96\077\uff96\100\uff96\102\uff96\103\uff96\001\002" +
    "\000\026\016\uffd9\042\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\001\002\000\060" +
    "\002\uff90\005\uff90\010\uff90\011\uff90\012\uff90\013\uff90\016" +
    "\uff90\017\uff90\026\uff90\031\uff90\034\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\072\uff90\073\uff90\074\uff90\076\uff90\077" +
    "\uff90\100\uff90\102\uff90\103\uff90\001\002\000\056\005\011" +
    "\010\031\011\036\012\051\013\033\016\016\017\035\026" +
    "\050\031\030\034\017\036\006\037\046\040\024\041\044" +
    "\072\023\073\047\074\012\076\007\077\014\100\021\102" +
    "\027\103\037\001\002\000\056\005\011\010\031\011\036" +
    "\012\051\013\033\016\016\017\035\026\050\031\030\034" +
    "\017\036\006\037\046\040\024\041\044\072\023\073\047" +
    "\074\012\076\007\077\014\100\021\102\027\103\037\001" +
    "\002\000\060\002\uffd3\005\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\016\uffd3\017\uffd3\026\uffd3\031\uffd3\034\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\072\uffd3\073\uffd3\074\uffd3" +
    "\076\uffd3\077\uffd3\100\uffd3\102\uffd3\103\uffd3\001\002\000" +
    "\060\002\uffd4\005\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\016\uffd4\017\uffd4\026\uffd4\031\uffd4\034\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\072\uffd4\073\uffd4\074\uffd4\076\uffd4" +
    "\077\uffd4\100\uffd4\102\uffd4\103\uffd4\001\002\000\060\002" +
    "\uffa3\005\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\016\uffa3" +
    "\017\uffa3\026\uffa3\031\uffa3\034\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\072\uffa3\073\uffa3\074\uffa3\076\uffa3\077\uffa3" +
    "\100\uffa3\102\uffa3\103\uffa3\001\002\000\060\002\uffd5\005" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\016\uffd5\017\uffd5" +
    "\026\uffd5\031\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\072\uffd5\073\uffd5\074\uffd5\076\uffd5\077\uffd5\100\uffd5" +
    "\102\uffd5\103\uffd5\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\ufffe\001\002\000\060\002\uffa8\005\uffa8\010\uffa8" +
    "\011\uffa8\012\uffa8\013\uffa8\016\uffa8\017\uffa8\026\uffa8\031" +
    "\uffa8\034\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\072\uffa8" +
    "\073\uffa8\074\uffa8\076\uffa8\077\uffa8\100\uffa8\102\uffa8\103" +
    "\uffa8\001\002\000\016\005\011\010\031\011\036\012\051" +
    "\013\033\071\065\001\002\000\056\005\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\016\uffe7\017\uffe7\026\uffe7\031\uffe7" +
    "\034\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\072\uffe7\073" +
    "\uffe7\074\uffe7\076\uffe7\077\uffe7\100\uffe7\102\uffe7\103\uffe7" +
    "\001\002\000\004\016\067\001\002\000\004\071\070\001" +
    "\002\000\056\005\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\016\uffe8\017\uffe8\026\uffe8\031\uffe8\034\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\072\uffe8\073\uffe8\074\uffe8\076\uffe8" +
    "\077\uffe8\100\uffe8\102\uffe8\103\uffe8\001\002\000\004\070" +
    "\uffdf\001\002\000\004\070\uffe0\001\002\000\004\070\uffe3" +
    "\001\002\000\004\070\uffdd\001\002\000\004\070\uffe4\001" +
    "\002\000\004\070\uffe1\001\002\000\004\070\uffe2\001\002" +
    "\000\004\070\127\001\002\000\066\002\uffce\005\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\016\uffce\017\uffce\026\uffce" +
    "\031\uffce\032\113\034\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\055\uffce\070\115\072\uffce\073\uffce\074\uffce\076\uffce" +
    "\077\uffce\100\uffce\102\uffce\103\uffce\001\002\000\004\070" +
    "\uffde\001\002\000\004\070\111\001\002\000\004\070\105" +
    "\001\002\000\014\005\011\010\031\011\036\012\051\013" +
    "\033\001\002\000\004\016\107\001\002\000\004\071\110" +
    "\001\002\000\056\005\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\016\uffe9\017\uffe9\026\uffe9\031\uffe9\034\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\072\uffe9\073\uffe9\074\uffe9\076" +
    "\uffe9\077\uffe9\100\uffe9\102\uffe9\103\uffe9\001\002\000\004" +
    "\071\112\001\002\000\056\005\uff8b\010\uff8b\011\uff8b\012" +
    "\uff8b\013\uff8b\016\uff8b\017\uff8b\026\uff8b\031\uff8b\034\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\041\uff8b\072\uff8b\073\uff8b\074" +
    "\uff8b\076\uff8b\077\uff8b\100\uff8b\102\uff8b\103\uff8b\001\002" +
    "\000\004\016\125\001\002\000\062\002\uffcd\005\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\016\uffcd\017\uffcd\026\uffcd" +
    "\031\uffcd\034\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\055" +
    "\uffcd\072\uffcd\073\uffcd\074\uffcd\076\uffcd\077\uffcd\100\uffcd" +
    "\102\uffcd\103\uffcd\001\002\000\016\005\011\010\031\011" +
    "\036\012\051\013\033\071\116\001\002\000\056\005\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\016\uffec\017\uffec\026" +
    "\uffec\031\uffec\034\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\072\uffec\073\uffec\074\uffec\076\uffec\077\uffec\100\uffec\102" +
    "\uffec\103\uffec\001\002\000\004\071\124\001\002\000\004" +
    "\016\121\001\002\000\006\032\122\071\uffd7\001\002\000" +
    "\014\005\011\010\031\011\036\012\051\013\033\001\002" +
    "\000\004\071\uffd6\001\002\000\056\005\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\016\uffeb\017\uffeb\026\uffeb\031\uffeb" +
    "\034\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\072\uffeb\073" +
    "\uffeb\074\uffeb\076\uffeb\077\uffeb\100\uffeb\102\uffeb\103\uffeb" +
    "\001\002\000\064\002\uffcc\005\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\016\uffcc\017\uffcc\026\uffcc\031\uffcc\032\113" +
    "\034\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\055\uffcc\072" +
    "\uffcc\073\uffcc\074\uffcc\076\uffcc\077\uffcc\100\uffcc\102\uffcc" +
    "\103\uffcc\001\002\000\062\002\uffcb\005\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\016\uffcb\017\uffcb\026\uffcb\031\uffcb" +
    "\034\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\055\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\076\uffcb\077\uffcb\100\uffcb\102\uffcb" +
    "\103\uffcb\001\002\000\004\016\130\001\002\000\004\071" +
    "\131\001\002\000\056\005\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\016\uffea\017\uffea\026\uffea\031\uffea\034\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\072\uffea\073\uffea\074\uffea" +
    "\076\uffea\077\uffea\100\uffea\102\uffea\103\uffea\001\002\000" +
    "\056\005\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\016\ufff9" +
    "\017\ufff9\026\ufff9\031\ufff9\034\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\072\ufff9\073\ufff9\074\ufff9\076\ufff9\077\ufff9" +
    "\100\ufff9\102\ufff9\103\ufff9\001\002\000\022\004\151\006" +
    "\146\007\136\016\152\020\141\021\150\023\140\057\137" +
    "\001\002\000\060\002\uffd1\005\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\016\uffd1\017\uffd1\026\uffd1\031\uffd1\034\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\072\uffd1\073\uffd1\074" +
    "\uffd1\076\uffd1\077\uffd1\100\uffd1\102\uffd1\103\uffd1\001\002" +
    "\000\060\002\uffca\005\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\016\uffca\017\uffca\026\uffca\031\uffca\034\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\072\uffca\073\uffca\074\uffca\076" +
    "\uffca\077\uffca\100\uffca\102\uffca\103\uffca\001\002\000\120" +
    "\002\uffc3\005\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\022\uffc3\026\uffc3\031\uffc3" +
    "\032\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\044" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\066\uffc3\071\uffc3\072\uffc3\073\uffc3\074" +
    "\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\102\uffc3\103\uffc3" +
    "\001\002\000\016\004\151\006\146\007\136\016\152\020" +
    "\141\023\140\001\002\000\120\002\uffc5\005\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\022\uffc5\026\uffc5\031\uffc5\032\uffc5\034\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\044\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077" +
    "\uffc5\100\uffc5\102\uffc5\103\uffc5\001\002\000\120\002\uffc6" +
    "\005\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\022\uffc6\026\uffc6\031\uffc6\032\uffc6" +
    "\034\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\044\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\066\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075" +
    "\uffc6\076\uffc6\077\uffc6\100\uffc6\102\uffc6\103\uffc6\001\002" +
    "\000\076\002\uffba\005\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\026\uffba\031\uffba" +
    "\034\uffba\036\uffba\037\uffba\040\uffba\041\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\072\uffba\073\uffba\074\uffba\075\uffba" +
    "\076\uffba\077\uffba\100\uffba\102\uffba\103\uffba\001\002\000" +
    "\120\002\uffc2\005\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\017\uffc2\022\uffc2\026\uffc2\031" +
    "\uffc2\032\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\044\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\071\uffc2\072\uffc2\073\uffc2" +
    "\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\102\uffc2\103" +
    "\uffc2\001\002\000\120\002\uffc0\005\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\022" +
    "\uffc0\026\uffc0\031\uffc0\032\uffc0\034\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\044\uffc0\056\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\071\uffc0" +
    "\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100" +
    "\uffc0\102\uffc0\103\uffc0\001\002\000\120\002\uffc1\005\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\022\uffc1\026\uffc1\031\uffc1\032\uffc1\034\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\044\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\100\uffc1\102\uffc1\103\uffc1\001\002\000\120" +
    "\002\uffc4\005\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\022\uffc4\026\uffc4\031\uffc4" +
    "\032\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\044" +
    "\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\071\uffc4\072\uffc4\073\uffc4\074" +
    "\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\102\uffc4\103\uffc4" +
    "\001\002\000\066\002\uffc8\005\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\026\uffc8" +
    "\031\uffc8\034\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8" +
    "\102\uffc8\103\uffc8\001\002\000\016\004\151\006\146\007" +
    "\136\016\152\020\141\023\140\001\002\000\120\002\uffc7" +
    "\005\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\022\uffc7\026\uffc7\031\uffc7\032\uffc7" +
    "\034\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\044\uffc7\056" +
    "\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7" +
    "\065\uffc7\066\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\076\uffc7\077\uffc7\100\uffc7\102\uffc7\103\uffc7\001\002" +
    "\000\124\002\uffbf\005\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\022\uffbf\026\uffbf" +
    "\031\uffbf\032\uffbf\033\170\034\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\044\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\070\172\071" +
    "\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf" +
    "\100\uffbf\102\uffbf\103\uffbf\001\002\000\114\002\uffc9\005" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\022\156\026\uffc9\031\uffc9\034\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\044\163\056\157\057\161" +
    "\060\155\061\160\062\162\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9" +
    "\100\uffc9\102\uffc9\103\uffc9\001\002\000\016\004\151\006" +
    "\146\007\136\016\152\020\141\023\140\001\002\000\016" +
    "\004\uffb7\006\uffb7\007\uffb7\016\uffb7\020\uffb7\023\uffb7\001" +
    "\002\000\076\002\uffb8\005\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\026\uffb8\031" +
    "\uffb8\034\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\072\uffb8\073\uffb8\074\uffb8\075" +
    "\uffb8\076\uffb8\077\uffb8\100\uffb8\102\uffb8\103\uffb8\001\002" +
    "\000\016\004\151\006\146\007\136\016\152\020\141\023" +
    "\140\001\002\000\016\004\uffb6\006\uffb6\007\uffb6\016\uffb6" +
    "\020\uffb6\023\uffb6\001\002\000\016\004\151\006\146\007" +
    "\136\016\152\020\141\023\140\001\002\000\016\004\uffb5" +
    "\006\uffb5\007\uffb5\016\uffb5\020\uffb5\023\uffb5\001\002\000" +
    "\016\004\151\006\146\007\136\016\152\020\141\023\140" +
    "\001\002\000\076\002\uffb4\005\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\026\uffb4" +
    "\031\uffb4\034\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\072\uffb4\073\uffb4\074\uffb4" +
    "\075\uffb4\076\uffb4\077\uffb4\100\uffb4\102\uffb4\103\uffb4\001" +
    "\002\000\076\002\uffbd\005\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\026\uffbd\031" +
    "\uffbd\034\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\072\uffbd\073\uffbd\074\uffbd\075" +
    "\uffbd\076\uffbd\077\uffbd\100\uffbd\102\uffbd\103\uffbd\001\002" +
    "\000\076\002\uffbe\005\uffbe\010\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\026\uffbe\031\uffbe" +
    "\034\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\066\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\100\uffbe\102\uffbe\103\uffbe\001\002\000" +
    "\076\002\uffbc\005\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\026\uffbc\031\uffbc\034" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076" +
    "\uffbc\077\uffbc\100\uffbc\102\uffbc\103\uffbc\001\002\000\004" +
    "\016\202\001\002\000\120\002\uffb1\005\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1" +
    "\022\uffb1\026\uffb1\031\uffb1\032\uffb1\034\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\044\uffb1\056\uffb1\057\uffb1\060\uffb1" +
    "\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\071" +
    "\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1" +
    "\100\uffb1\102\uffb1\103\uffb1\001\002\000\020\004\151\006" +
    "\146\007\136\016\152\020\141\023\140\071\173\001\002" +
    "\000\120\002\uffb0\005\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\022\uffb0\026\uffb0" +
    "\031\uffb0\032\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\044\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\066\uffb0\071\uffb0\072\uffb0\073" +
    "\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\102\uffb0" +
    "\103\uffb0\001\002\000\004\071\200\001\002\000\006\032" +
    "\176\071\uffae\001\002\000\016\004\151\006\146\007\136" +
    "\016\152\020\141\023\140\001\002\000\004\071\uffad\001" +
    "\002\000\120\002\uffaf\005\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\022\uffaf\026" +
    "\uffaf\031\uffaf\032\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\044\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\071\uffaf\072\uffaf" +
    "\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\102" +
    "\uffaf\103\uffaf\001\002\000\120\002\uffb2\005\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\022\uffb2\026\uffb2\031\uffb2\032\uffb2\034\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\044\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2" +
    "\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077" +
    "\uffb2\100\uffb2\102\uffb2\103\uffb2\001\002\000\122\002\uffb3" +
    "\005\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\022\uffb3\026\uffb3\031\uffb3\032\uffb3" +
    "\034\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\044\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\065\uffb3\066\uffb3\070\172\071\uffb3\072\uffb3\073\uffb3\074" +
    "\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\102\uffb3\103\uffb3" +
    "\001\002\000\076\002\uffb9\005\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\026\uffb9" +
    "\031\uffb9\034\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\066\uffb9\072\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\100\uffb9\102\uffb9\103\uffb9\001" +
    "\002\000\076\002\uffbb\005\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\026\uffbb\031" +
    "\uffbb\034\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\063\uffbb" +
    "\064\uffbb\065\uffbb\066\uffbb\072\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\100\uffbb\102\uffbb\103\uffbb\001\002" +
    "\000\004\002\uffff\001\002\000\004\067\uffef\001\002\000" +
    "\004\067\212\001\002\000\004\067\uffed\001\002\000\004" +
    "\067\uffee\001\002\000\056\005\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\016\ufff4\017\ufff4\026\ufff4\031\ufff4\034\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\072\ufff4\073\ufff4\074" +
    "\ufff4\076\ufff4\077\ufff4\100\ufff4\102\ufff4\103\ufff4\001\002" +
    "\000\004\055\214\001\002\000\004\035\215\001\002\000" +
    "\004\017\216\001\002\000\004\070\172\001\002\000\060" +
    "\002\uff8c\005\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\016" +
    "\uff8c\017\uff8c\026\uff8c\031\uff8c\034\uff8c\036\uff8c\037\uff8c" +
    "\040\uff8c\041\uff8c\072\uff8c\073\uff8c\074\uff8c\076\uff8c\077" +
    "\uff8c\100\uff8c\102\uff8c\103\uff8c\001\002\000\060\005\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\013\ufff8\016\ufff8\017\ufff8\026" +
    "\ufff8\031\ufff8\034\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\072\ufff8\073\ufff8\074\ufff8\076\ufff8\077\ufff8\100\ufff8\101" +
    "\221\102\ufff8\103\ufff8\001\002\000\004\017\222\001\002" +
    "\000\056\005\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\016" +
    "\ufff7\017\ufff7\026\ufff7\031\ufff7\034\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\072\ufff7\073\ufff7\074\ufff7\076\ufff7\077" +
    "\ufff7\100\ufff7\102\ufff7\103\ufff7\001\002\000\004\067\ufff0" +
    "\001\002\000\004\067\ufff2\001\002\000\004\067\ufff3\001" +
    "\002\000\004\067\230\001\002\000\004\067\ufff1\001\002" +
    "\000\056\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\016" +
    "\ufff5\017\ufff5\026\ufff5\031\ufff5\034\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\072\ufff5\073\ufff5\074\ufff5\076\ufff5\077" +
    "\ufff5\100\ufff5\102\ufff5\103\ufff5\001\002\000\004\002\ufffa" +
    "\001\002\000\016\005\011\010\031\011\036\012\051\013" +
    "\033\071\233\001\002\000\056\005\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\016\uffe5\017\uffe5\026\uffe5\031\uffe5\034" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\076\uffe5\077\uffe5\100\uffe5\102\uffe5\103\uffe5\001" +
    "\002\000\004\016\235\001\002\000\004\071\236\001\002" +
    "\000\056\005\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\016" +
    "\uffe6\017\uffe6\026\uffe6\031\uffe6\034\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\072\uffe6\073\uffe6\074\uffe6\076\uffe6\077" +
    "\uffe6\100\uffe6\102\uffe6\103\uffe6\001\002\000\060\002\uffa7" +
    "\005\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\016\uffa7\017" +
    "\uffa7\026\uffa7\031\uffa7\034\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\072\uffa7\073\uffa7\074\uffa7\076\uffa7\077\uffa7\100" +
    "\uffa7\102\uffa7\103\uffa7\001\002\000\062\002\uffa6\005\uffa6" +
    "\010\uffa6\011\uffa6\012\uffa6\013\uffa6\016\uffa6\017\uffa6\026" +
    "\uffa6\031\uffa6\032\241\034\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\072\uffa6\073\uffa6\074\uffa6\076\uffa6\077\uffa6\100" +
    "\uffa6\102\uffa6\103\uffa6\001\002\000\016\004\151\006\146" +
    "\007\136\016\152\020\141\023\140\001\002\000\060\002" +
    "\uffa5\005\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\016\uffa5" +
    "\017\uffa5\026\uffa5\031\uffa5\034\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\072\uffa5\073\uffa5\074\uffa5\076\uffa5\077\uffa5" +
    "\100\uffa5\102\uffa5\103\uffa5\001\002\000\012\063\251\064" +
    "\250\065\252\066\247\001\002\000\060\002\uff95\005\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\016\uff95\017\uff95\026" +
    "\uff95\031\uff95\034\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\072\uff95\073\uff95\074\uff95\076\uff95\077\uff95\100\uff95\102" +
    "\uff95\103\uff95\001\002\000\076\002\uff9a\005\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\026\uff9a\031\uff9a\034\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\063\uffc8\064\uffc8\065\uffc8\066\uffc8\072\uff9a\073" +
    "\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\102\uff9a" +
    "\103\uff9a\001\002\000\114\002\uff99\005\uff99\010\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\022\uffc1\026\uff99\031\uff99\034\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\044\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\072\uff99\073" +
    "\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\102\uff99" +
    "\103\uff99\001\002\000\022\004\151\006\146\007\136\016" +
    "\152\020\141\021\150\023\140\057\137\001\002\000\022" +
    "\004\151\006\146\007\136\016\152\020\141\021\150\023" +
    "\140\057\137\001\002\000\022\004\151\006\146\007\136" +
    "\016\152\020\141\021\150\023\140\057\137\001\002\000" +
    "\022\004\151\006\146\007\136\016\152\020\141\021\150" +
    "\023\140\057\137\001\002\000\066\002\uff9c\005\uff9c\010" +
    "\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\026\uff9c\031\uff9c\034\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c" +
    "\077\uff9c\100\uff9c\102\uff9c\103\uff9c\001\002\000\066\002" +
    "\uff9e\005\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\026\uff9e\031\uff9e\034\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\072\uff9e\073\uff9e\074\uff9e" +
    "\075\uff9e\076\uff9e\077\uff9e\100\uff9e\102\uff9e\103\uff9e\001" +
    "\002\000\066\002\uff9d\005\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\026\uff9d\031" +
    "\uff9d\034\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\072\uff9d" +
    "\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\102" +
    "\uff9d\103\uff9d\001\002\000\066\002\uff9b\005\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\026\uff9b\031\uff9b\034\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077" +
    "\uff9b\100\uff9b\102\uff9b\103\uff9b\001\002\000\004\016\261" +
    "\001\002\000\060\002\uffab\005\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\016\uffab\017\uffab\026\uffab\031\uffab\034\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\072\uffab\073\uffab\074" +
    "\uffab\076\uffab\077\uffab\100\uffab\102\uffab\103\uffab\001\002" +
    "\000\006\055\133\070\172\001\002\000\060\002\uffac\005" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\016\uffac\017\uffac" +
    "\026\uffac\031\uffac\034\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\072\uffac\073\uffac\074\uffac\076\uffac\077\uffac\100\uffac" +
    "\102\uffac\103\uffac\001\002\000\004\002\ufffc\001\002\000" +
    "\004\100\272\001\002\000\006\055\133\100\uff94\001\002" +
    "\000\004\016\267\001\002\000\006\055\133\100\uff93\001" +
    "\002\000\004\100\uff91\001\002\000\004\100\uff92\001\002" +
    "\000\022\004\151\006\146\007\136\016\152\020\141\021" +
    "\150\023\140\057\137\001\002\000\006\014\275\015\274" +
    "\001\002\000\016\004\151\006\146\007\136\016\152\020" +
    "\141\023\140\001\002\000\016\004\151\006\146\007\136" +
    "\016\152\020\141\023\140\001\002\000\060\002\uff98\005" +
    "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\016\uff98\017\uff98" +
    "\026\uff98\031\uff98\034\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\072\uff98\073\uff98\074\uff98\076\uff98\077\uff98\100\uff98" +
    "\102\uff98\103\uff98\001\002\000\004\026\300\001\002\000" +
    "\060\002\uff97\005\uff97\010\uff97\011\uff97\012\uff97\013\uff97" +
    "\016\uff97\017\uff97\026\uff97\031\uff97\034\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\072\uff97\073\uff97\074\uff97\076\uff97" +
    "\077\uff97\100\uff97\102\uff97\103\uff97\001\002\000\004\075" +
    "\302\001\002\000\060\002\uffa0\005\uffa0\010\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\016\uffa0\017\uffa0\026\uffa0\031\uffa0\034" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\072\uffa0\073\uffa0" +
    "\074\uffa0\076\uffa0\077\uffa0\100\uffa0\102\uffa0\103\uffa0\001" +
    "\002\000\004\002\001\001\002\000\060\002\uff8e\005\uff8e" +
    "\010\uff8e\011\uff8e\012\uff8e\013\uff8e\016\uff8e\017\uff8e\026" +
    "\uff8e\031\uff8e\034\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e" +
    "\072\uff8e\073\uff8e\074\uff8e\076\uff8e\077\uff8e\100\uff8e\102" +
    "\uff8e\103\uff8e\001\002\000\060\002\uff8d\005\uff8d\010\uff8d" +
    "\011\uff8d\012\uff8d\013\uff8d\016\uff8d\017\uff8d\026\uff8d\031" +
    "\uff8d\034\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\072\uff8d" +
    "\073\uff8d\074\uff8d\076\uff8d\077\uff8d\100\uff8d\102\uff8d\103" +
    "\uff8d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\060\002\007\003\012\004\041\005\052\006" +
    "\053\007\024\012\037\014\044\020\014\021\057\022\055" +
    "\023\054\024\042\031\031\036\004\041\033\042\040\043" +
    "\025\045\051\047\017\050\056\051\021\052\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\027\303\030\152\033\146\035\141\036\144\037\142" +
    "\040\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\027\242\030\152\033\244\035\141\036\245\037\142" +
    "\040\143\046\300\001\001\000\002\001\001\000\006\014" +
    "\265\053\263\001\001\000\056\003\262\004\041\005\052" +
    "\006\053\007\024\012\037\014\044\020\014\021\057\022" +
    "\055\023\054\024\042\031\031\036\004\041\033\042\040" +
    "\043\025\045\051\047\017\050\056\051\021\052\003\001" +
    "\001\000\004\026\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\027\242\030\152\033\244\035\141\036" +
    "\245\037\142\040\143\046\243\001\001\000\002\001\001" +
    "\000\014\030\237\036\144\037\142\040\143\044\236\001" +
    "\001\000\002\001\001\000\056\003\230\004\041\005\052" +
    "\006\053\007\024\012\037\014\044\020\014\021\057\022" +
    "\055\023\054\024\042\031\031\036\004\041\033\042\040" +
    "\043\025\045\051\047\017\050\056\051\021\052\003\001" +
    "\001\000\002\001\001\000\004\010\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\204\004\041\005\052\006\053\007\024" +
    "\012\037\014\044\020\014\021\057\022\055\023\054\024" +
    "\042\031\031\036\004\041\033\042\040\043\025\045\051" +
    "\047\017\050\056\051\021\052\003\001\001\000\004\026" +
    "\133\001\001\000\002\001\001\000\006\016\077\017\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\061" +
    "\004\041\005\052\006\053\007\024\012\037\014\044\020" +
    "\014\021\057\022\055\023\054\024\042\031\031\036\004" +
    "\041\033\042\040\043\025\045\051\047\017\050\056\051" +
    "\021\052\003\001\001\000\056\003\060\004\041\005\052" +
    "\006\053\007\024\012\037\014\044\020\014\021\057\022" +
    "\055\023\054\024\042\031\031\036\004\041\033\042\040" +
    "\043\025\045\051\047\017\050\056\051\021\052\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\117\015\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\117\015\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\027\134\030\152\033" +
    "\146\035\141\036\144\037\142\040\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\030" +
    "\203\036\144\037\142\040\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\030\202\036\144\037\142\040\143\001" +
    "\001\000\002\001\001\000\004\013\170\001\001\000\004" +
    "\034\153\001\001\000\012\030\166\036\144\037\142\040" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\030\165\036\144\037\142\040\143\001\001\000\002\001" +
    "\001\000\012\030\164\036\144\037\142\040\143\001\001" +
    "\000\002\001\001\000\012\030\163\036\144\037\142\040" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\200\001\001\000" +
    "\002\001\001\000\014\030\174\032\173\036\144\037\142" +
    "\040\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\030\174\032\176\036\144\037\142" +
    "\040\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\030\237\036\144\037\142\040\143" +
    "\044\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\027\255\030\152\033\146\035\141\036\144\037\142\040" +
    "\143\001\001\000\020\027\254\030\152\033\146\035\141" +
    "\036\144\037\142\040\143\001\001\000\020\027\253\030" +
    "\152\033\146\035\141\036\144\037\142\040\143\001\001" +
    "\000\020\027\252\030\152\033\146\035\141\036\144\037" +
    "\142\040\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\200\001" +
    "\001\000\002\001\001\000\006\013\170\026\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\270\001\001\000\002\001\001\000\004\026\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\027" +
    "\242\030\152\033\244\035\141\036\245\037\142\040\143" +
    "\046\272\001\001\000\002\001\001\000\012\030\276\036" +
    "\144\037\142\040\143\001\001\000\012\030\275\036\144" +
    "\037\142\040\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	
	// Connect this parser to a scanner!
	


        public void syntax_error(Symbol cur_token) {
            System.out.println("Error "+cur_token);
        }

	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= P 
            {
              Object RESULT =null;
		 System.out.println("----SINTAXIS CORRECTA----");  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= bibliotecas P 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P ::= clases P 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // P ::= funciones P 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // P ::= bloques P 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // P ::= bloques 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // P ::= principalF P 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bibliotecas ::= INCLUIR TEXTO 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre BIBLIOTECA ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bibliotecas",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // clases ::= CLASE IDENTIFICADORCLASE 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre CLASE "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clases",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // clases ::= CLASE IDENTIFICADORCLASE EXTIENDE IDENTIFICADORCLASE 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre CLASE "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clases",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // clases ::= contenidoClase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clases",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenidoClase ::= PROPIEDADES props DOSPUNTOS 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre PROPIEDAD ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoClase",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenidoClase ::= METODOS metodos1 DOSPUNTOS 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre METODO ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoClase",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // props ::= PUBLICAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("props",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // props ::= PRIVADAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("props",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // props ::= PROTEGIDAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("props",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // props ::= ESTATICO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("props",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodos1 ::= PUBLICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodos1",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // metodos1 ::= PRIVADOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodos1",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // metodos1 ::= PROTEGIDOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodos1",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funciones ::= dato IDENTIFICADOR PARENTESISI PARENTESISF 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre FUNCION SIN ARGS "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funciones ::= dato IDENTIFICADOR PARENTESISI args PARENTESISF 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre FUNCION2 CON ARGS");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funciones ::= dato funciones_especiales PARENTESISI IDENTIFICADOR PARENTESISF 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre FUNCION ESPECIAL");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funciones ::= dato funciones_mate PARENTESISI dato IDENTIFICADOR PARENTESISF 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre FUNCINCION MATEMATICA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funciones ::= CONSTRUCTOR PARENTESISI dato IDENTIFICADOR PARENTESISF 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre CONSTRUCTOS CON PARAMETROS");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funciones ::= CONSTRUCTOR PARENTESISI PARENTESISF 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre COSNTRUCTOR");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funciones ::= DESTRUCTOR PARENTESISI dato IDENTIFICADOR PARENTESISF 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre DESTRUCTOR");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funciones ::= DESTRUCTOR PARENTESISI PARENTESISF 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre DESTRUCTOR");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funciones_especiales ::= CADENAAENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones_especiales",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funciones_especiales ::= CADENAAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones_especiales",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funciones_especiales ::= CADENAABOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones_especiales",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funciones_mate ::= SENO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones_mate",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funciones_mate ::= COSENO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones_mate",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funciones_mate ::= TAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones_mate",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funciones_mate ::= LOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones_mate",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funciones_mate ::= RAIZ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funciones_mate",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dato ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dato ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dato ::= CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dato ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dato ::= NULO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // args ::= dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // args ::= dato IDENTIFICADOR COMA args 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bloques ::= bloque1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloques",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bloques ::= bloque2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloques",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bloques ::= bloque3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloques",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bloque1 ::= declarar_var 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre VARIABLE  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloque1 ::= declarar_var equal0 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre VARIABLE  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque1 ::= asignar 
            {
              Object RESULT =null;
		System.out.println("Sintactico: Encontre ASIGNACION  ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque1 ::= io 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declarar_var ::= dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declarar_var",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declarar_var ::= dato IDENTIFICADOR declarar_var2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declarar_var",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declarar_var2 ::= COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declarar_var2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declarar_var2 ::= COMA IDENTIFICADOR declarar_var2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declarar_var2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // equal0 ::= IGUAL equal1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal0",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // equal1 ::= equal2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // equal1 ::= operacion 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre OPERACION  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // equal2 ::= NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // equal2 ::= NUMEROREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // equal2 ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // equal2 ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // equal2 ::= FALSO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // equal2 ::= call_funcion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // equal2 ::= call_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // equal2 ::= call_var 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // equal2 ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equal2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacion ::= equal2 MAS equal2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operacion ::= equal2 MENOS equal2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operacion ::= equal2 operadores equal2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operacion ::= MENOS equal2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operacion ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operacion ::= INCREMENTO equal2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operacion ::= equal2 DECREMENTO 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre OPERACION  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operadores ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadores",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operadores ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadores",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operadores ::= DIVISIONMODULAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadores",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operacion_logica ::= equal2 OR equal2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion_logica",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // call_var ::= IDENTIFICADOR PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("call_var",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // call_clase ::= IDENTIFICADOR PUNTO call_funcion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("call_clase",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // call_funcion ::= IDENTIFICADOR parametros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("call_funcion",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametros ::= PARENTESISI PARENTESISF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametros ::= PARENTESISI mandar PARENTESISF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // mandar ::= equal2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mandar",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // mandar ::= equal2 COMA mandar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mandar",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignar ::= IDENTIFICADOR PUNTO IDENTIFICADOR equal0 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignar",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asignar ::= IDENTIFICADOR equal0 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignar",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // io ::= escribir1 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre ESCRITURA  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("io",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // io ::= leer1 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre LECTURA  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("io",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // leer1 ::= LEER IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("leer1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // escribir1 ::= ESCRIBIR info 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("escribir1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // info ::= equal2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("info",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // info ::= equal2 COMA info 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("info",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bloque2 ::= estructura_si 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre ESCTRUCTURA SI  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque2",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bloque2 ::= estructura_sino 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre ESCRITURA SINO "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque2",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bloque2 ::= estructura_hacer 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre HACER  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque2",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bloque2 ::= estructura_desde 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre DESDE  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque2",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // estructura_si ::= SI condicion ENTONCES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_si",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // estructura_sino ::= SINO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_sino",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // condicion ::= equal1 MENORQUE equal1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // condicion ::= equal1 MAYORQUE equal1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // condicion ::= equal1 COMPARACION equal1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condicion ::= equal1 DIFERENTE equal1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condicion ::= operacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // condicion ::= call_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // estructura_desde ::= DESDE aux MIENTRAS condicion INCREMENTAR equal2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_desde",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // estructura_desde ::= DESDE aux MIENTRAS condicion DECREMENTAR equal2 HACER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_desde",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // estructura_hacer ::= HACER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_hacer",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // estructura_hacer ::= MIENTRAS condicion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_hacer",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // aux ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aux",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // aux ::= dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aux",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // aux ::= IDENTIFICADOR equal0 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aux",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // aux ::= dato IDENTIFICADOR equal0 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aux",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bloque3 ::= instanciar1 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre INSTANCIAR  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque3",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // bloque3 ::= call_clase 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre LLAMAR  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque3",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // bloque3 ::= DEVOLVER equal1 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre DEVOLVER  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque3",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // bloque3 ::= ELIMINAR IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre ELIMINAR  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque3",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // instanciar1 ::= IDENTIFICADORCLASE IDENTIFICADOR IGUAL INSTANCIAR IDENTIFICADORCLASE parametros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciar1",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // principalF ::= dato PRINCIPAL PARENTESISI PARENTESISF 
            {
              Object RESULT =null;
		 System.out.println("Sintactico: Encontre PRINCIPAL ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("principalF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
