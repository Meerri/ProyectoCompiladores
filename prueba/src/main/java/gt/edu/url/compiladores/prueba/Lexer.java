// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/prueba/archivo.flex

/* return new Symbol(sym.error); System.out.println("LEX: Encontr√© una clase"); */
/* Seccion 1 */
package gt.edu.url.compiladores.prueba;
import java_cup.runtime.Symbol; 


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\1\1\13\1\14\1\15\12\16\1\17\1\0\1\20"+
    "\1\21\1\22\2\0\1\23\3\24\1\25\11\24\1\26"+
    "\1\27\1\24\1\30\10\24\6\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\42\1\50\1\51\1\52"+
    "\1\53\1\54\1\42\1\55\1\42\1\56\12\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\3\20\20\21\2\0\1\22\1\0\1\23\1\0"+
    "\1\2\1\24\1\25\1\2\1\26\1\27\1\20\26\21"+
    "\1\30\2\21\1\2\1\20\37\21\1\20\24\21\1\31"+
    "\3\21\1\32\4\21\1\33\1\34\1\35\1\36\2\21"+
    "\1\20\2\21\1\37\3\21\1\40\10\21\1\41\1\42"+
    "\14\21\1\20\1\21\1\43\1\21\1\44\4\21\1\45"+
    "\20\21\1\20\13\21\1\46\3\21\1\47\11\21\1\20"+
    "\1\50\6\21\1\51\1\52\1\53\1\54\1\21\1\55"+
    "\3\21\1\56\1\57\1\60\2\21\1\61\1\62\1\63"+
    "\1\21\1\64\6\21\1\65\2\21\1\66\3\21\1\67"+
    "\5\21\1\70\1\21\1\71\1\21\1\72\1\73\1\21"+
    "\1\74\1\21\1\75\1\76\1\77\1\100\2\21\1\101"+
    "\1\21\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\57\0\57"+
    "\0\57\0\u011a\0\u0149\0\u0178\0\57\0\u01a7\0\u01d6\0\57"+
    "\0\57\0\u0205\0\57\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0"+
    "\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0468"+
    "\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\57\0\u011a"+
    "\0\57\0\353\0\353\0\u05b1\0\57\0\57\0\57\0\u05e0"+
    "\0\57\0\u0234\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa"+
    "\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872"+
    "\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea"+
    "\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\353\0\u0ad5\0\u0b04\0\u0b33"+
    "\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab"+
    "\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23"+
    "\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b"+
    "\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113"+
    "\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b"+
    "\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403"+
    "\0\u1432\0\u1461\0\u02c1\0\u1490\0\u14bf\0\u14ee\0\u02c1\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u02c1\0\u02c1\0\u02c1\0\u02c1\0\u15d9"+
    "\0\u1608\0\u1637\0\u1666\0\u1695\0\u02c1\0\u16c4\0\u16f3\0\u1722"+
    "\0\u02c1\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b"+
    "\0\u189a\0\u02c1\0\u02c1\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985"+
    "\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd"+
    "\0\u1b2c\0\u1b5b\0\u1b8a\0\u02c1\0\u1bb9\0\u1be8\0\u1c17\0\u1c46"+
    "\0\u02c1\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f"+
    "\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07"+
    "\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u207f"+
    "\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u02c1\0\u2199\0\u21c8"+
    "\0\u21f7\0\u02c1\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311"+
    "\0\u2340\0\u236f\0\u239e\0\u23cd\0\u02c1\0\u23fc\0\u242b\0\u245a"+
    "\0\u2489\0\u24b8\0\u24e7\0\u02c1\0\u02c1\0\u02c1\0\u02c1\0\u2516"+
    "\0\u02c1\0\u2545\0\u2574\0\u25a3\0\u02c1\0\u02c1\0\u02c1\0\u25d2"+
    "\0\u2601\0\u02c1\0\u02c1\0\u02c1\0\u2630\0\u0234\0\u265f\0\u268e"+
    "\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u02c1\0\u2779\0\u27a8\0\u02c1"+
    "\0\u27d7\0\u2806\0\u2835\0\u02c1\0\u2864\0\u2893\0\u28c2\0\u28f1"+
    "\0\u2920\0\u02c1\0\u294f\0\u02c1\0\u297e\0\u02c1\0\u02c1\0\u29ad"+
    "\0\u02c1\0\u29dc\0\u02c1\0\u02c1\0\u02c1\0\u02c1\0\u2a0b\0\u2a3a"+
    "\0\u02c1\0\u2a69\0\u02c1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\3\24\1\25\1\26\1\24\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\27\1\35\1\36"+
    "\1\27\1\37\1\40\1\41\1\27\1\42\1\43\1\44"+
    "\1\45\1\27\1\46\2\27\2\47\2\0\5\47\1\50"+
    "\46\47\1\3\1\4\1\0\5\47\1\50\45\47\1\0"+
    "\2\4\54\0\2\47\2\0\5\47\1\50\7\47\1\51"+
    "\35\47\2\52\2\0\1\52\1\53\3\52\1\54\45\52"+
    "\2\47\2\0\5\47\1\50\3\47\1\55\43\47\2\0"+
    "\5\47\1\50\1\56\46\47\2\0\5\47\1\50\1\47"+
    "\1\57\45\47\2\0\5\47\1\60\3\47\1\60\43\47"+
    "\2\0\5\47\1\50\4\47\1\17\42\47\2\0\5\47"+
    "\1\50\7\47\1\61\37\47\2\0\5\47\1\50\1\47"+
    "\1\24\2\47\1\24\4\47\34\24\2\47\2\0\5\47"+
    "\1\50\1\47\1\24\2\47\1\24\4\47\5\24\1\62"+
    "\26\24\2\47\2\0\5\47\1\50\1\47\1\24\2\47"+
    "\1\24\4\47\25\24\1\63\6\24\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\34\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\23\27\1\64\10\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\6\27\1\65\11\27\1\66"+
    "\2\27\1\67\10\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\12\27\1\70\21\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\20\27\1\71\1\27\1\72\3\27\1\73\3\27\1\74"+
    "\1\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\6\27\1\75\25\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\6\27\1\76"+
    "\25\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\22\27\1\77\11\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\12\27\1\100"+
    "\10\27\1\101\10\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\12\27\1\102\3\27\1\103"+
    "\15\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\30\27\1\104\3\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\25\27\1\105"+
    "\2\27\1\106\3\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\6\27\1\107\3\27\1\110"+
    "\21\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\12\27\1\111\3\27\1\112\15\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\6\27\1\113\25\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\12\27\1\114\21\27\2\52"+
    "\2\0\1\52\1\53\3\52\1\54\3\52\1\115\41\52"+
    "\2\60\2\0\53\60\2\47\2\0\5\47\1\50\1\47"+
    "\1\24\2\47\1\24\4\47\16\24\1\116\15\24\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\23\27\1\117\10\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\11\27\1\120\22\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\6\27\1\121\25\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\22\27\1\122\3\27\1\123"+
    "\5\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\10\27\1\124\15\27\1\125\2\27\1\126"+
    "\2\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\16\27\1\127\15\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\27\27\1\130"+
    "\4\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\10\27\1\131\16\27\1\132\4\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\27\27\1\133\4\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\20\27\1\134\13\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\10\27\1\135\23\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\10\27\1\136\15\27\1\137"+
    "\5\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\12\27\1\140\21\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\14\27\1\141"+
    "\17\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\27\27\1\142\4\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\12\27\1\143"+
    "\21\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\20\27\1\144\13\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\16\27\1\145"+
    "\4\27\1\146\10\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\7\27\1\147\24\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\16\27\1\150\15\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\6\27\1\151\25\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\22\27\1\152\11\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\22\27\1\153\11\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\22\27\1\154\11\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\25\27\1\155\6\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\24\2\47\1\24\4\47"+
    "\22\24\1\156\11\24\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\20\27\1\157\13\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\12\27\1\160\21\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\26\27\1\161\5\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\26\27\1\162\5\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\12\27\1\163\21\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\25\27\1\164\6\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\11\27\1\165\15\27\1\166"+
    "\4\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\23\27\1\167\10\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\21\27\1\170"+
    "\12\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\12\27\1\171\10\27\1\172\10\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\25\27\1\173\6\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\6\27\1\174\25\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\16\27\1\175\15\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\26\27\1\176\5\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\12\27\1\177\21\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\20\27\1\200\4\27\1\201"+
    "\6\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\27\27\1\202\4\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\25\27\1\203"+
    "\6\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\6\27\1\204\25\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\23\27\1\205"+
    "\10\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\22\27\1\206\11\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\23\27\1\207"+
    "\10\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\31\27\1\210\2\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\24\27\1\211"+
    "\2\27\1\212\4\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\20\27\1\213\13\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\33\27\1\214\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\20\27\1\215\13\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\23\27"+
    "\1\216\10\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\23\27\1\217\10\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\14\27"+
    "\1\220\17\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\11\27\1\221\22\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\24\2\47\1\24\4\47\10\24"+
    "\1\222\23\24\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\12\27\1\223\21\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\22\27"+
    "\1\224\11\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\12\27\1\225\21\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\27\27"+
    "\1\226\4\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\22\27\1\227\11\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\12\27"+
    "\1\230\21\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\12\27\1\231\21\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\25\27"+
    "\1\232\6\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\20\27\1\233\13\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\16\27"+
    "\1\234\15\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\25\27\1\235\6\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\22\27"+
    "\1\236\11\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\16\27\1\237\15\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\27\27"+
    "\1\240\4\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\12\27\1\241\21\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\23\27"+
    "\1\242\10\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\25\27\1\243\6\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\30\27"+
    "\1\244\3\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\12\27\1\245\21\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\6\27"+
    "\1\246\25\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\25\27\1\247\6\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\11\27"+
    "\1\250\22\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\27\27\1\251\4\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\6\27"+
    "\1\252\25\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\16\27\1\253\15\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\12\27"+
    "\1\254\21\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\16\27\1\255\15\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\12\27"+
    "\1\256\21\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\6\27\1\257\25\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\24\2\47\1\24\4\47\16\24"+
    "\1\260\15\24\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\6\27\1\261\25\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\6\27"+
    "\1\262\25\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\25\27\1\263\6\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\23\27"+
    "\1\264\10\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\21\27\1\265\12\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\30\27"+
    "\1\266\3\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\31\27\1\267\2\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\22\27"+
    "\1\270\11\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\23\27\1\271\10\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\10\27"+
    "\1\272\23\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\7\27\1\273\24\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\16\27"+
    "\1\274\15\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\22\27\1\275\11\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\16\27"+
    "\1\276\15\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\21\27\1\277\12\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\22\27"+
    "\1\300\11\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\16\27\1\301\15\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\23\27"+
    "\1\302\10\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\25\27\1\303\6\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\11\27"+
    "\1\304\22\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\12\27\1\305\21\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\14\27"+
    "\1\306\17\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\10\27\1\307\23\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\22\27"+
    "\1\310\11\27\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\11\27\1\311\22\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\24\2\47\1\24\4\47\24\24"+
    "\1\312\7\24\2\47\2\0\5\47\1\50\1\47\1\27"+
    "\2\47\1\27\4\47\22\27\1\313\11\27\2\47\2\0"+
    "\5\47\1\50\1\47\1\27\2\47\1\27\4\47\1\314"+
    "\33\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\30\27\1\315\3\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\12\27\1\316"+
    "\21\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\10\27\1\317\23\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\12\27\1\320"+
    "\21\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\6\27\1\321\25\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\12\27\1\322"+
    "\21\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\16\27\1\323\15\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\10\27\1\324"+
    "\23\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\11\27\1\325\22\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\25\27\1\326"+
    "\6\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\12\27\1\327\21\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\10\27\1\330"+
    "\23\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\27\27\1\331\4\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\26\27\1\332"+
    "\5\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\6\27\1\333\25\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\6\27\1\334"+
    "\14\27\1\335\10\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\11\27\1\336\22\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\16\27\1\337\15\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\6\27\1\340\14\27\1\341"+
    "\10\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\27\27\1\342\4\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\12\27\1\343"+
    "\21\27\2\47\2\0\5\47\1\50\1\47\1\24\2\47"+
    "\1\24\4\47\6\24\1\344\25\24\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\23\27\1\345"+
    "\10\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\2\27\1\346\2\27\1\347\1\27\1\350"+
    "\24\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\10\27\1\351\23\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\22\27\1\352"+
    "\11\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\27\27\1\353\4\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\25\27\1\354"+
    "\6\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\25\27\1\355\6\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\26\27\1\356"+
    "\5\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\25\27\1\357\6\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\23\27\1\360"+
    "\10\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\12\27\1\361\21\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\22\27\1\362"+
    "\11\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\16\27\1\363\15\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\21\27\1\364"+
    "\12\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\26\27\1\365\5\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\26\27\1\366"+
    "\5\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\26\27\1\367\5\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\6\27\1\370"+
    "\25\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\11\27\1\371\22\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\26\27\1\372"+
    "\5\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\26\27\1\373\5\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\12\27\1\374"+
    "\21\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\25\27\1\375\6\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\24\2\47\1\24\4\47\20\24\1\376"+
    "\13\24\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\22\27\1\377\11\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\12\27\1\u0100"+
    "\21\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\23\27\1\u0101\10\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\27\27\1\u0102"+
    "\4\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\27\27\1\u0103\4\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\23\27\1\u0104"+
    "\10\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\26\27\1\u0105\5\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\27\27\1\u0106"+
    "\4\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\6\27\1\u0107\25\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\23\27\1\u0108"+
    "\10\27\2\47\2\0\5\47\1\50\1\47\1\27\2\47"+
    "\1\27\4\47\11\27\1\u0109\22\27\2\47\2\0\5\47"+
    "\1\50\1\47\1\27\2\47\1\27\4\47\6\27\1\u010a"+
    "\14\27\1\u010b\10\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\23\27\1\u010c\10\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\27\27\1\u010d\4\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\6\27\1\u010e\25\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\20\27\1\u010f\13\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\23\27\1\u0110\10\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\6\27\1\u0111\25\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\25\27\1\u0112\6\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\6\27\1\u0113\25\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\25\27\1\u0114\6\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\12\27\1\u0115\21\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\26\27\1\u0116\5\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\26\27\1\u0117\5\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\12\27\1\u0118\21\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\20\27\1\u0119\13\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\12\27\1\u011a\21\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\25\27\1\u011b\6\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\25\27\1\u011c\6\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\25\27\1\u011d\6\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\26\27\1\u011e\5\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\25\27\1\u011f\6\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\6\27\1\u0120\25\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\23\27\1\u0121\10\27\2\47\2\0\5\47\1\50\1\47"+
    "\1\27\2\47\1\27\4\47\22\27\1\u0122\11\27\2\47"+
    "\2\0\5\47\1\50\1\47\1\27\2\47\1\27\4\47"+
    "\23\27\1\u0123\10\27";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\45\1\2\0\1\1\1\0\1\1\1\0\367\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.error);
            }
            // fall through
          case 67: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 68: break;
          case 3:
            { return new Symbol(sym.DIVISIONMODULAR);
            }
            // fall through
          case 69: break;
          case 4:
            { return new Symbol(sym.PARENTESISI);
            }
            // fall through
          case 70: break;
          case 5:
            { return new Symbol(sym.PARENTESISF);
            }
            // fall through
          case 71: break;
          case 6:
            { return new Symbol(sym.MULTIPLICACION);
            }
            // fall through
          case 72: break;
          case 7:
            { return new Symbol(sym.MAS);
            }
            // fall through
          case 73: break;
          case 8:
            { return new Symbol(sym.MENOS);
            }
            // fall through
          case 74: break;
          case 9:
            { return new Symbol(sym.PUNTO, yytext());
            }
            // fall through
          case 75: break;
          case 10:
            { return new Symbol(sym.DIVISION);
            }
            // fall through
          case 76: break;
          case 11:
            { return new Symbol(sym.NUMEROENTERO, Integer.parseInt(yytext()));
            }
            // fall through
          case 77: break;
          case 12:
            { return new Symbol(sym.DOSPUNTOS);
            }
            // fall through
          case 78: break;
          case 13:
            { return new Symbol(sym.MENORQUE);
            }
            // fall through
          case 79: break;
          case 14:
            { return new Symbol(sym.IGUAL);
            }
            // fall through
          case 80: break;
          case 15:
            { return new Symbol(sym.MAYORQUE);
            }
            // fall through
          case 81: break;
          case 16:
            { return new Symbol(sym.IDENTIFICADORCLASE, yytext());
            }
            // fall through
          case 82: break;
          case 17:
            { return new Symbol(sym.IDENTIFICADOR, yytext());
            }
            // fall through
          case 83: break;
          case 18:
            { return new Symbol(sym.DIFERENTE);
            }
            // fall through
          case 84: break;
          case 19:
            { return new Symbol(sym.TEXTO);
            }
            // fall through
          case 85: break;
          case 20:
            { return new Symbol(sym.INCREMENTO);
            }
            // fall through
          case 86: break;
          case 21:
            { return new Symbol(sym.DECREMENTO);
            }
            // fall through
          case 87: break;
          case 22:
            { return new Symbol(sym.COMPARACION);
            }
            // fall through
          case 88: break;
          case 23:
            { return new Symbol(sym.OR, yytext());
            }
            // fall through
          case 89: break;
          case 24:
            { return new Symbol(sym.SI, yytext());
            }
            // fall through
          case 90: break;
          case 25:
            { return new Symbol(sym.LEER, yytext());
            }
            // fall through
          case 91: break;
          case 26:
            { return new Symbol(sym.NULO, yytext());
            }
            // fall through
          case 92: break;
          case 27:
            { return new Symbol(sym.RAIZ, yytext());
            }
            // fall through
          case 93: break;
          case 28:
            { return new Symbol(sym.REAL, yytext());
            }
            // fall through
          case 94: break;
          case 29:
            { return new Symbol(sym.SENO, yytext());
            }
            // fall through
          case 95: break;
          case 30:
            { return new Symbol(sym.SINO, yytext());
            }
            // fall through
          case 96: break;
          case 31:
            { return new Symbol(sym.CLASE, yytext());
            }
            // fall through
          case 97: break;
          case 32:
            { return new Symbol(sym.DESDE, yytext());
            }
            // fall through
          case 98: break;
          case 33:
            { return new Symbol(sym.FALSO, yytext());
            }
            // fall through
          case 99: break;
          case 34:
            { return new Symbol(sym.HACER, yytext());
            }
            // fall through
          case 100: break;
          case 35:
            { return new Symbol(sym.CADENA, yytext());
            }
            // fall through
          case 101: break;
          case 36:
            { return new Symbol(sym.COSENO, yytext());
            }
            // fall through
          case 102: break;
          case 37:
            { return new Symbol(sym.ENTERO, yytext());
            }
            // fall through
          case 103: break;
          case 38:
            { return new Symbol(sym.INCLUIR, yytext());
            }
            // fall through
          case 104: break;
          case 39:
            { return new Symbol(sym.METODOS, yytext());
            }
            // fall through
          case 105: break;
          case 40:
            { return new Symbol(sym.BOOLEANO, yytext());
            }
            // fall through
          case 106: break;
          case 41:
            { return new Symbol(sym.DEVOLVER, yytext());
            }
            // fall through
          case 107: break;
          case 42:
            { return new Symbol(sym.ELIMINAR, yytext());
            }
            // fall through
          case 108: break;
          case 43:
            { return new Symbol(sym.ENTONCES, yytext());
            }
            // fall through
          case 109: break;
          case 44:
            { return new Symbol(sym.ESCRIBIR, yytext());
            }
            // fall through
          case 110: break;
          case 45:
            { return new Symbol(sym.EXTIENDE, yytext());
            }
            // fall through
          case 111: break;
          case 46:
            { return new Symbol(sym.MIENTRAS, yytext());
            }
            // fall through
          case 112: break;
          case 47:
            { return new Symbol(sym.PRIVADAS, yytext());
            }
            // fall through
          case 113: break;
          case 48:
            { return new Symbol(sym.PRIVADOS, yytext());
            }
            // fall through
          case 114: break;
          case 49:
            { return new Symbol(sym.PUBLICAS, yytext());
            }
            // fall through
          case 115: break;
          case 50:
            { return new Symbol(sym.PUBLICOS, yytext());
            }
            // fall through
          case 116: break;
          case 51:
            { return new Symbol(sym.TAN, yytext());
            }
            // fall through
          case 117: break;
          case 52:
            { return new Symbol(sym.PRINCIPAL, yytext());
            }
            // fall through
          case 118: break;
          case 53:
            { return new Symbol(sym.ESTATICO, yytext());
            }
            // fall through
          case 119: break;
          case 54:
            { return new Symbol(sym.LOG, yytext());
            }
            // fall through
          case 120: break;
          case 55:
            { return new Symbol(sym.VERDADERO, yytext());
            }
            // fall through
          case 121: break;
          case 56:
            { return new Symbol(sym.DESTRUCTOR, yytext());
            }
            // fall through
          case 122: break;
          case 57:
            { return new Symbol(sym.INSTANCIAR, yytext());
            }
            // fall through
          case 123: break;
          case 58:
            { return new Symbol(sym.PROTEGIDAS, yytext());
            }
            // fall through
          case 124: break;
          case 59:
            { return new Symbol(sym.PROTEGIDOS, yytext());
            }
            // fall through
          case 125: break;
          case 60:
            { return new Symbol(sym.CADENAAREAL, yytext());
            }
            // fall through
          case 126: break;
          case 61:
            { return new Symbol(sym.CONSTRUCTOR, yytext());
            }
            // fall through
          case 127: break;
          case 62:
            { return new Symbol(sym.DECREMENTAR, yytext());
            }
            // fall through
          case 128: break;
          case 63:
            { return new Symbol(sym.INCREMENTAR, yytext());
            }
            // fall through
          case 129: break;
          case 64:
            { return new Symbol(sym.PROPIEDADES, yytext());
            }
            // fall through
          case 130: break;
          case 65:
            { return new Symbol(sym.CADENAAENTERO, yytext());
            }
            // fall through
          case 131: break;
          case 66:
            { return new Symbol(sym.CADENAABOOL, yytext());
            }
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
