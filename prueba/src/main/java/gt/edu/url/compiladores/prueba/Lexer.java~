// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/prueba/archivo.flex

/* return new Symbol(sym.error); System.out.println("LEX: Encontr√© una clase"); */
/* Seccion 1 */
package gt.edu.url.compiladores.prueba;
import java_cup.runtime.Symbol; 


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\2\0\1\11\1\12\1\13"+
    "\1\14\1\1\1\15\1\16\1\17\12\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\0\1\26\3\27\1\30\11\27"+
    "\1\31\1\32\1\27\1\33\10\27\1\34\1\0\1\35"+
    "\3\0\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\2\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\47\1\55\1\56\1\57\1\60\1\61\1\47\1\62"+
    "\1\47\1\63\1\64\1\0\1\65\7\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\3\23\1\24\1\25\20\26"+
    "\1\27\1\30\2\0\1\31\1\0\1\32\1\0\1\2"+
    "\1\33\1\34\1\2\1\35\1\36\1\23\26\26\1\37"+
    "\2\26\1\2\1\23\37\26\1\23\24\26\1\40\3\26"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\2\26\1\23"+
    "\2\26\1\46\3\26\1\47\10\26\1\50\1\51\14\26"+
    "\1\23\1\26\1\52\1\26\1\53\4\26\1\54\20\26"+
    "\1\23\13\26\1\55\3\26\1\56\11\26\1\23\1\57"+
    "\6\26\1\60\1\61\1\62\1\63\1\26\1\64\3\26"+
    "\1\65\1\66\1\67\2\26\1\70\1\71\1\72\1\26"+
    "\1\73\6\26\1\74\2\26\1\75\3\26\1\76\5\26"+
    "\1\77\1\26\1\100\1\26\1\101\1\102\1\26\1\103"+
    "\1\26\1\104\1\105\1\106\1\107\2\26\1\110\1\26"+
    "\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\66\0\66"+
    "\0\66\0\66\0\66\0\u0144\0\u017a\0\u01b0\0\66\0\u01e6"+
    "\0\u021c\0\66\0\66\0\66\0\u0252\0\66\0\u0288\0\u02be"+
    "\0\u02f4\0\66\0\66\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402"+
    "\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\66\0\66\0\66\0\u0144\0\66"+
    "\0\u010e\0\u010e\0\u068a\0\66\0\66\0\66\0\u06c0\0\66"+
    "\0\u0288\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u010e\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4"+
    "\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584"+
    "\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734"+
    "\0\u176a\0\u032a\0\u17a0\0\u17d6\0\u180c\0\u032a\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u032a\0\u032a\0\u032a\0\u032a\0\u191a\0\u1950"+
    "\0\u1986\0\u19bc\0\u19f2\0\u032a\0\u1a28\0\u1a5e\0\u1a94\0\u032a"+
    "\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44"+
    "\0\u032a\0\u032a\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u032a\0\u1fda\0\u2010\0\u2046\0\u207c\0\u032a"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c"+
    "\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u032a\0\u269a\0\u26d0\0\u2706"+
    "\0\u032a\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880"+
    "\0\u28b6\0\u28ec\0\u2922\0\u032a\0\u2958\0\u298e\0\u29c4\0\u29fa"+
    "\0\u2a30\0\u2a66\0\u032a\0\u032a\0\u032a\0\u032a\0\u2a9c\0\u032a"+
    "\0\u2ad2\0\u2b08\0\u2b3e\0\u032a\0\u032a\0\u032a\0\u2b74\0\u2baa"+
    "\0\u032a\0\u032a\0\u032a\0\u2be0\0\u0288\0\u2c16\0\u2c4c\0\u2c82"+
    "\0\u2cb8\0\u2cee\0\u2d24\0\u032a\0\u2d5a\0\u2d90\0\u032a\0\u2dc6"+
    "\0\u2dfc\0\u2e32\0\u032a\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40"+
    "\0\u032a\0\u2f76\0\u032a\0\u2fac\0\u032a\0\u032a\0\u2fe2\0\u032a"+
    "\0\u3018\0\u032a\0\u032a\0\u032a\0\u032a\0\u304e\0\u3084\0\u032a"+
    "\0\u30ba\0\u032a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\3\27\1\30"+
    "\1\31\1\27\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\34\1\42\1\43\1\34\1\44\1\45"+
    "\1\46\1\34\1\47\1\50\1\51\1\52\1\34\1\53"+
    "\2\34\1\54\1\55\2\56\2\0\7\56\1\57\53\56"+
    "\1\3\1\4\1\0\7\56\1\57\52\56\1\0\2\4"+
    "\63\0\2\56\2\0\7\56\1\57\10\56\1\60\41\56"+
    "\2\61\2\0\1\61\1\62\5\61\1\63\52\61\2\56"+
    "\2\0\7\56\1\57\3\56\1\64\50\56\2\0\7\56"+
    "\1\57\1\65\53\56\2\0\7\56\1\57\1\56\1\66"+
    "\52\56\2\0\7\56\1\67\3\56\1\67\50\56\2\0"+
    "\7\56\1\57\4\56\1\21\47\56\2\0\7\56\1\57"+
    "\10\56\1\70\43\56\2\0\7\56\1\57\1\56\1\27"+
    "\2\56\1\27\5\56\6\27\2\56\26\27\4\56\2\0"+
    "\7\56\1\57\1\56\1\27\2\56\1\27\5\56\5\27"+
    "\1\71\2\56\26\27\4\56\2\0\7\56\1\57\1\56"+
    "\1\27\2\56\1\27\5\56\6\27\2\56\17\27\1\72"+
    "\6\27\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\26\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\15\34\1\73\10\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\1\74\11\34"+
    "\1\75\2\34\1\76\10\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\4\34"+
    "\1\77\21\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\12\34\1\100\1\34"+
    "\1\101\3\34\1\102\3\34\1\103\1\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\1\104\25\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\1\105\25\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\14\34\1\106\11\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\4\34\1\107\10\34\1\110\10\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\4\34\1\111\3\34\1\112\15\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\22\34\1\113\3\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\17\34"+
    "\1\114\2\34\1\115\3\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\1\116"+
    "\3\34\1\117\21\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\4\34\1\120"+
    "\3\34\1\121\15\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\1\122\25\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\4\34\1\123\21\34\2\56\2\61"+
    "\2\0\1\61\1\62\5\61\1\63\3\61\1\124\46\61"+
    "\2\67\2\0\62\67\2\56\2\0\7\56\1\57\1\56"+
    "\1\27\2\56\1\27\5\56\6\27\2\56\10\27\1\125"+
    "\15\27\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\15\34\1\126\10\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\3\34\1\127\22\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\1\130\25\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\14\34\1\131\3\34"+
    "\1\132\5\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\2\34\1\133\15\34"+
    "\1\134\2\34\1\135\2\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\10\34"+
    "\1\136\15\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\21\34\1\137\4\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\2\34\1\140\16\34\1\141\4\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\21\34\1\142\4\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\12\34\1\143\13\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\2\34"+
    "\1\144\23\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\2\34\1\145\15\34"+
    "\1\146\5\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\4\34\1\147\21\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\6\34\1\150\17\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\21\34\1\151\4\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\4\34"+
    "\1\152\21\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\12\34\1\153\13\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\10\34\1\154\4\34\1\155\10\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\1\34\1\156\24\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\10\34\1\157\15\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\1\160"+
    "\25\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\14\34\1\161\11\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\14\34\1\162\11\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\14\34\1\163\11\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\17\34\1\164"+
    "\6\34\4\56\2\0\7\56\1\57\1\56\1\27\2\56"+
    "\1\27\5\56\6\27\2\56\14\27\1\165\11\27\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\12\34\1\166\13\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\4\34\1\167\21\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\20\34\1\170"+
    "\5\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\20\34\1\171\5\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\4\34\1\172\21\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\17\34\1\173\6\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\3\34\1\174"+
    "\15\34\1\175\4\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\15\34\1\176"+
    "\10\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\13\34\1\177\12\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\4\34\1\200\10\34\1\201\10\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\17\34\1\202\6\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\1\203\25\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\10\34\1\204\15\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\20\34\1\205\5\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\4\34\1\206\21\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\12\34"+
    "\1\207\4\34\1\210\6\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\21\34"+
    "\1\211\4\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\17\34\1\212\6\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\1\213\25\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\15\34\1\214\10\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\14\34\1\215"+
    "\11\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\15\34\1\216\10\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\23\34\1\217\2\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\16\34\1\220\2\34\1\221\4\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\12\34\1\222\13\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\25\34\1\223"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\12\34\1\224\13\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\15\34\1\225\10\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\15\34"+
    "\1\226\10\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\6\34\1\227\17\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\3\34\1\230\22\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\27\2\56\1\27\5\56\6\27"+
    "\2\56\2\27\1\231\23\27\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\4\34"+
    "\1\232\21\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\14\34\1\233\11\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\4\34\1\234\21\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\21\34\1\235\4\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\14\34"+
    "\1\236\11\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\4\34\1\237\21\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\4\34\1\240\21\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\17\34\1\241\6\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\12\34"+
    "\1\242\13\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\10\34\1\243\15\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\17\34\1\244\6\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\14\34\1\245\11\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\10\34"+
    "\1\246\15\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\21\34\1\247\4\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\4\34\1\250\21\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\15\34\1\251\10\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\17\34"+
    "\1\252\6\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\22\34\1\253\3\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\4\34\1\254\21\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\1\255\25\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\17\34\1\256"+
    "\6\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\3\34\1\257\22\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\21\34\1\260\4\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\1\261\25\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\10\34\1\262\15\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\4\34\1\263\21\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\10\34\1\264\15\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\4\34"+
    "\1\265\21\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\1\266\25\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\27\2\56\1\27\5\56"+
    "\6\27\2\56\10\27\1\267\15\27\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\1\270\25\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\1\271\25\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\17\34\1\272\6\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\15\34\1\273\10\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\13\34\1\274"+
    "\12\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\22\34\1\275\3\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\23\34\1\276\2\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\14\34\1\277\11\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\15\34\1\300"+
    "\10\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\2\34\1\301\23\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\1\34\1\302\24\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\10\34\1\303\15\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\14\34\1\304"+
    "\11\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\10\34\1\305\15\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\13\34\1\306\12\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\14\34\1\307\11\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\10\34\1\310"+
    "\15\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\15\34\1\311\10\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\17\34\1\312\6\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\3\34\1\313\22\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\4\34\1\314"+
    "\21\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\6\34\1\315\17\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\2\34\1\316\23\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\14\34\1\317\11\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\3\34\1\320"+
    "\22\34\4\56\2\0\7\56\1\57\1\56\1\27\2\56"+
    "\1\27\5\56\6\27\2\56\16\27\1\321\7\27\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\14\34\1\322\11\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\1\323\5\34"+
    "\2\56\26\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\22\34\1\324\3\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\4\34\1\325\21\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\2\34\1\326\23\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\4\34"+
    "\1\327\21\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\1\330\25\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\4\34\1\331\21\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\10\34\1\332\15\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\2\34\1\333"+
    "\23\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\3\34\1\334\22\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\17\34\1\335\6\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\4\34\1\336\21\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\2\34\1\337"+
    "\23\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\21\34\1\340\4\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\20\34\1\341\5\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\1\342\25\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\1\343\14\34\1\344"+
    "\10\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\3\34\1\345\22\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\10\34\1\346\15\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\1\347\14\34\1\350\10\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\21\34"+
    "\1\351\4\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\4\34\1\352\21\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\27\2\56\1\27"+
    "\5\56\6\27\2\56\1\353\25\27\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\15\34\1\354\10\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\2\34\1\355\2\34\1\356"+
    "\2\56\1\34\1\357\24\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\2\34"+
    "\1\360\23\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\14\34\1\361\11\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\21\34\1\362\4\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\17\34\1\363\6\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\17\34"+
    "\1\364\6\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\20\34\1\365\5\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\17\34\1\366\6\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\15\34\1\367\10\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\4\34"+
    "\1\370\21\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\14\34\1\371\11\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\10\34\1\372\15\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\13\34\1\373\12\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\20\34"+
    "\1\374\5\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\20\34\1\375\5\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\20\34\1\376\5\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\1\377\25\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\3\34\1\u0100"+
    "\22\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\20\34\1\u0101\5\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\20\34\1\u0102\5\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\4\34\1\u0103\21\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\17\34\1\u0104"+
    "\6\34\4\56\2\0\7\56\1\57\1\56\1\27\2\56"+
    "\1\27\5\56\6\27\2\56\12\27\1\u0105\13\27\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\14\34\1\u0106\11\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\4\34\1\u0107\21\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\15\34\1\u0108"+
    "\10\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\21\34\1\u0109\4\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\21\34\1\u010a\4\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\15\34\1\u010b\10\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\20\34\1\u010c"+
    "\5\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\21\34\1\u010d\4\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\1\u010e\25\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\15\34"+
    "\1\u010f\10\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\3\34\1\u0110\22\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\1\u0111\14\34\1\u0112\10\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\15\34\1\u0113\10\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\21\34\1\u0114\4\34\4\56\2\0\7\56\1\57\1\56"+
    "\1\34\2\56\1\34\5\56\6\34\2\56\1\u0115\25\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\12\34\1\u0116\13\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\15\34\1\u0117\10\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\1\u0118"+
    "\25\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\17\34\1\u0119\6\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\1\u011a\25\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\17\34"+
    "\1\u011b\6\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\4\34\1\u011c\21\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\20\34\1\u011d\5\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\20\34\1\u011e\5\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\4\34"+
    "\1\u011f\21\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\12\34\1\u0120\13\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\4\34\1\u0121\21\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\17\34\1\u0122\6\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\17\34"+
    "\1\u0123\6\34\4\56\2\0\7\56\1\57\1\56\1\34"+
    "\2\56\1\34\5\56\6\34\2\56\17\34\1\u0124\6\34"+
    "\4\56\2\0\7\56\1\57\1\56\1\34\2\56\1\34"+
    "\5\56\6\34\2\56\20\34\1\u0125\5\34\4\56\2\0"+
    "\7\56\1\57\1\56\1\34\2\56\1\34\5\56\6\34"+
    "\2\56\17\34\1\u0126\6\34\4\56\2\0\7\56\1\57"+
    "\1\56\1\34\2\56\1\34\5\56\6\34\2\56\1\u0127"+
    "\25\34\4\56\2\0\7\56\1\57\1\56\1\34\2\56"+
    "\1\34\5\56\6\34\2\56\15\34\1\u0128\10\34\4\56"+
    "\2\0\7\56\1\57\1\56\1\34\2\56\1\34\5\56"+
    "\6\34\2\56\14\34\1\u0129\11\34\4\56\2\0\7\56"+
    "\1\57\1\56\1\34\2\56\1\34\5\56\6\34\2\56"+
    "\15\34\1\u012a\10\34\2\56";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12528];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\54\1\2\0\1\1\1\0\1\1\1\0\367\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.error);
            }
            // fall through
          case 74: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 75: break;
          case 3:
            { return new Symbol(sym.NUMERAL);
            }
            // fall through
          case 76: break;
          case 4:
            { return new Symbol(sym.DOLAR);
            }
            // fall through
          case 77: break;
          case 5:
            { return new Symbol(sym.DIVISIONMODULAR);
            }
            // fall through
          case 78: break;
          case 6:
            { return new Symbol(sym.PARENTESISI);
            }
            // fall through
          case 79: break;
          case 7:
            { return new Symbol(sym.PARENTESISF);
            }
            // fall through
          case 80: break;
          case 8:
            { return new Symbol(sym.MULTIPLICACION);
            }
            // fall through
          case 81: break;
          case 9:
            { return new Symbol(sym.MAS);
            }
            // fall through
          case 82: break;
          case 10:
            { return new Symbol(sym.MENOS);
            }
            // fall through
          case 83: break;
          case 11:
            { return new Symbol(sym.PUNTO, yytext());
            }
            // fall through
          case 84: break;
          case 12:
            { return new Symbol(sym.DIVISION);
            }
            // fall through
          case 85: break;
          case 13:
            { return new Symbol(sym.NUMEROENTERO, Integer.parseInt(yytext()));
            }
            // fall through
          case 86: break;
          case 14:
            { return new Symbol(sym.DOSPUNTOS);
            }
            // fall through
          case 87: break;
          case 15:
            { return new Symbol(sym.FINLINEA);
            }
            // fall through
          case 88: break;
          case 16:
            { return new Symbol(sym.MENORQUE);
            }
            // fall through
          case 89: break;
          case 17:
            { return new Symbol(sym.IGUAL);
            }
            // fall through
          case 90: break;
          case 18:
            { return new Symbol(sym.MAYORQUE);
            }
            // fall through
          case 91: break;
          case 19:
            { return new Symbol(sym.IDENTIFICADORCLASE, yytext());
            }
            // fall through
          case 92: break;
          case 20:
            { return new Symbol(sym.CORCHETEI);
            }
            // fall through
          case 93: break;
          case 21:
            { return new Symbol(sym.CORCHETEF);
            }
            // fall through
          case 94: break;
          case 22:
            { return new Symbol(sym.IDENTIFICADOR, yytext());
            }
            // fall through
          case 95: break;
          case 23:
            { return new Symbol(sym.LLAVEI);
            }
            // fall through
          case 96: break;
          case 24:
            { return new Symbol(sym.LLAVEF);
            }
            // fall through
          case 97: break;
          case 25:
            { return new Symbol(sym.DIFERENTE);
            }
            // fall through
          case 98: break;
          case 26:
            { return new Symbol(sym.TEXTO);
            }
            // fall through
          case 99: break;
          case 27:
            { return new Symbol(sym.INCREMENTO);
            }
            // fall through
          case 100: break;
          case 28:
            { return new Symbol(sym.DECREMENTO);
            }
            // fall through
          case 101: break;
          case 29:
            { return new Symbol(sym.COMPARACION);
            }
            // fall through
          case 102: break;
          case 30:
            { return new Symbol(sym.OR, yytext());
            }
            // fall through
          case 103: break;
          case 31:
            { return new Symbol(sym.SI, yytext());
            }
            // fall through
          case 104: break;
          case 32:
            { return new Symbol(sym.LEER, yytext());
            }
            // fall through
          case 105: break;
          case 33:
            { return new Symbol(sym.NULO, yytext());
            }
            // fall through
          case 106: break;
          case 34:
            { return new Symbol(sym.RAIZ, yytext());
            }
            // fall through
          case 107: break;
          case 35:
            { return new Symbol(sym.REAL, yytext());
            }
            // fall through
          case 108: break;
          case 36:
            { return new Symbol(sym.SENO, yytext());
            }
            // fall through
          case 109: break;
          case 37:
            { return new Symbol(sym.SINO, yytext());
            }
            // fall through
          case 110: break;
          case 38:
            { return new Symbol(sym.CLASE, yytext());
            }
            // fall through
          case 111: break;
          case 39:
            { return new Symbol(sym.DESDE, yytext());
            }
            // fall through
          case 112: break;
          case 40:
            { return new Symbol(sym.FALSO, yytext());
            }
            // fall through
          case 113: break;
          case 41:
            { return new Symbol(sym.HACER, yytext());
            }
            // fall through
          case 114: break;
          case 42:
            { return new Symbol(sym.CADENA, yytext());
            }
            // fall through
          case 115: break;
          case 43:
            { return new Symbol(sym.COSENO, yytext());
            }
            // fall through
          case 116: break;
          case 44:
            { return new Symbol(sym.ENTERO, yytext());
            }
            // fall through
          case 117: break;
          case 45:
            { return new Symbol(sym.INCLUIR, yytext());
            }
            // fall through
          case 118: break;
          case 46:
            { return new Symbol(sym.METODOS, yytext());
            }
            // fall through
          case 119: break;
          case 47:
            { return new Symbol(sym.BOOLEANO, yytext());
            }
            // fall through
          case 120: break;
          case 48:
            { return new Symbol(sym.DEVOLVER, yytext());
            }
            // fall through
          case 121: break;
          case 49:
            { return new Symbol(sym.ELIMINAR, yytext());
            }
            // fall through
          case 122: break;
          case 50:
            { return new Symbol(sym.ENTONCES, yytext());
            }
            // fall through
          case 123: break;
          case 51:
            { return new Symbol(sym.ESCRIBIR, yytext());
            }
            // fall through
          case 124: break;
          case 52:
            { return new Symbol(sym.EXTIENDE, yytext());
            }
            // fall through
          case 125: break;
          case 53:
            { return new Symbol(sym.MIENTRAS, yytext());
            }
            // fall through
          case 126: break;
          case 54:
            { return new Symbol(sym.PRIVADAS, yytext());
            }
            // fall through
          case 127: break;
          case 55:
            { return new Symbol(sym.PRIVADOS, yytext());
            }
            // fall through
          case 128: break;
          case 56:
            { return new Symbol(sym.PUBLICAS, yytext());
            }
            // fall through
          case 129: break;
          case 57:
            { return new Symbol(sym.PUBLICOS, yytext());
            }
            // fall through
          case 130: break;
          case 58:
            { return new Symbol(sym.TAN, yytext());
            }
            // fall through
          case 131: break;
          case 59:
            { return new Symbol(sym.PRINCIPAL, yytext());
            }
            // fall through
          case 132: break;
          case 60:
            { return new Symbol(sym.ESTATICO, yytext());
            }
            // fall through
          case 133: break;
          case 61:
            { return new Symbol(sym.LOG, yytext());
            }
            // fall through
          case 134: break;
          case 62:
            { return new Symbol(sym.VERDADERO, yytext());
            }
            // fall through
          case 135: break;
          case 63:
            { return new Symbol(sym.DESTRUCTOR, yytext());
            }
            // fall through
          case 136: break;
          case 64:
            { return new Symbol(sym.INSTANCIAR, yytext());
            }
            // fall through
          case 137: break;
          case 65:
            { return new Symbol(sym.PROTEGIDAS, yytext());
            }
            // fall through
          case 138: break;
          case 66:
            { return new Symbol(sym.PROTEGIDOS, yytext());
            }
            // fall through
          case 139: break;
          case 67:
            { return new Symbol(sym.CADENAAREAL, yytext());
            }
            // fall through
          case 140: break;
          case 68:
            { return new Symbol(sym.CONSTRUCTOR, yytext());
            }
            // fall through
          case 141: break;
          case 69:
            { return new Symbol(sym.DECREMENTAR, yytext());
            }
            // fall through
          case 142: break;
          case 70:
            { return new Symbol(sym.INCREMENTAR, yytext());
            }
            // fall through
          case 143: break;
          case 71:
            { return new Symbol(sym.PROPIEDADES, yytext());
            }
            // fall through
          case 144: break;
          case 72:
            { return new Symbol(sym.CADENAAENTERO, yytext());
            }
            // fall through
          case 145: break;
          case 73:
            { return new Symbol(sym.CADENAABOOL, yytext());
            }
            // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
